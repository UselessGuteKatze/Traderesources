using CommonSource.References.Object;
using CommonSource.SearchCollections.Object;
using LandSource.Helpers;
using LandSource.QueryTables.LandObject;
using LandSource.QueryTables.Trades;
using LandSource.References.LandObject;
using LandSource.SearchCollections.Trades;
using Newtonsoft.Json;
using System;
using System.Linq;
using TradeResourcesPlugin.Helpers;
using TradeResourcesPlugin.Modules.LandObjectsMenus.Object;
using TradeResourcesPlugin.Modules.LandObjectsMenus.Trades;
using UsersResources;
using Yoda.Interfaces.Helpers.NotWorkingDaysHelper;
using YodaApp.YodaHelpers.Scriban;
using YodaApp.YodaHelpers.SearchCollections;
using YodaCommonReferences;
using YodaHelpers.ActionMenus;
using YodaHelpers.HtmlDocumentBuilder;
using YodaQuery;
using PaymentItemModel = TradeResourcesPlugin.Helpers.Agreements.PaymentItemModel;

namespace TradeResourcesPlugin.Modules.LandObjectsMenus.Agreements {
    public class ДоговорКпПраваАрендыЗемельногоУчастка : DefaultAgrTemplate<ДоговорКпПраваАрендыЗемельногоУчастка> {
        public override void SetAgreementNumber(int agreementId)
        {
            DocNumber = $"{agreementId}-ТПР";
        }
        public override string SetDefaultLanguage()
        {
            return "ru";
        }
        public override string[] SetLanguages()
        {
            return new[] { "kz", "ru" };
        }

        public string ГородПосёлокСело { get; set; }
        public ДоговорМодель Договор { get; set; }
        public ПредметДоговораМодель ПредметДоговора { get; set; }
        public ЦенаЗемельногоУчасткаМодель ЦенаЗемельногоУчастка { get; set; }
        public ПраваИОбязанностиСторонМодель ПраваИОбязанностиСторон { get; set; }
        public string ОсобыеУсловияИное { get; set; }
        public ЗаключительныеПоложенияМодель ЗаключительныеПоложения { get; set; }
        public РеквизитыМодель Реквизиты { get; set; }
        public class РеквизитыМодель {
            public string Продавец { get; set; }
            public string Покупатель { get; set; }
        }
        public class ДоговорМодель {
            public УполномоченныйОрганМодель УполномоченныйОрган { get; set; }
            public ПокупательМодель Покупатель { get; set; }
        }
        public class УполномоченныйОрганМодель {
            public string Название { get; set; }
            public string ВЛице { get; set; }
            public string НаОсновании { get; set; }
        }
        public class ПокупательМодель {
            public string Название { get; set; }
            public string ВЛице { get; set; }
            public string НаОсновании { get; set; }
        }
        public class ПредметДоговораМодель {
            public string РешениеОт { get; set; }
            public string СрокАренды { get; set; }
            public string РешениеНомер { get; set; }
            public string КадастровыйНомер { get; set; }
            public string Адрес { get; set; }
            public decimal Площадь { get; set; }
            public string ЦелевоеНазначение { get; set; }
            public string ОграниченияВИспользованииИОбременения { get; set; }
            public string Делимость { get; set; }
        }
        public class ЦенаЗемельногоУчасткаМодель {
            public string АктОценкиОт { get; set; }
            public string АктОценкиНомер { get; set; }
            public string НачальнаяСоставляет { get; set; }
            public string ОценочнаяСоставляет { get; set; }
            public string ОценочнаяОпределенаОрганизацией { get; set; }
            public int НомерТоргов { get; set; }
            public string ДатаТоргов { get; set; }
            public string ПродажиСоставляет { get; set; }
            public string ОплатаПоРеквизитам { get; set; }
        }
        public class ПраваИОбязанностиСторонМодель
        {
            public string ПокупательИмеетПравоИное { get; set; }
            public string ПокупательОбязанИное { get; set; }
            public string ПродавецИмеетПравоИное { get; set; }
            public string ПродавецОбязанИное { get; set; }
        }
        public class ЗаключительныеПоложенияМодель
        {
            public string Иное { get; set; }
        }
        public override string[] SetReadOnlyProprties()
        {
            return new[] {
                "ПредметДоговора.СрокАренды",
                "ПредметДоговора.КадастровыйНомер",
                "ПредметДоговора.Адрес",
                "ПредметДоговора.Площадь",
                "ПредметДоговора.ЦелевоеНазначение",
                "ПредметДоговора.ОграниченияВИспользованииИОбременения",
                "ПредметДоговора.Делимость",
                "ЦенаЗемельногоУчастка.НачальнаяСоставляет",
                "ЦенаЗемельногоУчастка.ОценочнаяСоставляет",
                "ЦенаЗемельногоУчастка.ПродажиСоставляет",
                "ЦенаЗемельногоУчастка.НомерТоргов",
                "ЦенаЗемельногоУчастка.ДатаТоргов",
                "ЦенаЗемельногоУчастка.ОплатаПоРеквизитам",
            };
        }

        public override void FillModel(ActionEnv<DefaultAgrTemplateArgs> env)
        {
            var obj = LandObjectModelHelper.GetObjectModel(env.Args.ObjectId, env.QueryExecuter);
            var trd = LandObjectTradeModelHelper.GetTradeModel(env.Args.TradeId, env.QueryExecuter);
            var auctionId = LandObjectTradeModelHelper.GetTradeAuctionId(env.Args.TradeId, env.QueryExecuter);

            var sellerCorp = env.User.GetAccountData(env.QueryExecuter);
            var sellerUser = env.User.GetUserData(env.QueryExecuter);
            var winner = trd.WinnerData;

            ГородПосёлокСело = "_____";

            Договор = new ДоговорМодель {
                УполномоченныйОрган = new УполномоченныйОрганМодель
                {
                    Название = sellerCorp.Account.NameRu,
                    ВЛице = sellerUser.User.FullName
                },
                Покупатель = new ПокупательМодель
                {
                    Название = winner.CorpName,
                    ВЛице = winner.FullName
                }
            };

            var refAr = RefAr.Instance;
            var refBoolChargePresence = new RefBoolChargePresence();
            var refUpgsLandObjectsIsDivisible = RefUpgsLandObjectsIsDivisible.GetReference(env.QueryExecuter);
            ПредметДоговора = new ПредметДоговораМодель {
                РешениеОт = "«__» ____ 20__ года",
                СрокАренды = $"{(trd.OwnershipMonths.Value / 12)} ({NumberToString((trd.OwnershipMonths.Value / 12), "ru")})",
                КадастровыйНомер = obj.KadNumber,
                Адрес = $"{refAr.Search(obj.Country).Text.Text}, {refAr.Search(obj.Region).Text.Text}, {refAr.Search(obj.District).Text.Text}, {obj.Address}",
                Площадь = obj.LandArea,
                ЦелевоеНазначение = obj.Purpose,
                ОграниченияВИспользованииИОбременения = obj.ChargePresence == RefBoolChargePresence.Values.HasNoChargeArest ? refBoolChargePresence.Search(obj.ChargePresence).Text.Text : obj.ChargeRestrictionArest,
                Делимость = refUpgsLandObjectsIsDivisible.Search(obj.IsDivisible).Text.Text
            };

            long objCost = Convert.ToInt64(Math.Ceiling(obj.Cost.Value));
            long trdCost = Convert.ToInt64(Math.Ceiling(trd.Cost.Value));
            long trdInitialCost = Convert.ToInt64(Math.Ceiling(trd.InitialCost.Value));
            var taxOrgsSearchCollection = new TaxAndMsuOrgsSearchCollection();
            ЦенаЗемельногоУчастка = new ЦенаЗемельногоУчасткаМодель
            {
                АктОценкиОт = "«__» ____ 20__ года",
                ДатаТоргов = trd.DateTime.Value.ToString("«dd» MMMM yyyy года"),
                НомерТоргов = auctionId,
                ОценочнаяСоставляет = $"{objCost:#,0.} тенге ({NumberToString(objCost, "ru")} тенге)",
                ПродажиСоставляет = $"{trdCost:#,0.} тенге ({NumberToString(trdCost, "ru")} тенге)",
                НачальнаяСоставляет = $"{trdInitialCost:#,0.} тенге ({NumberToString(trdInitialCost, "ru")} тенге)",
                АктОценкиНомер = "0",
                ОплатаПоРеквизитам = $"{taxOrgsSearchCollection.GetItem(trd.TaxAuthorityBin, env.RequestContext).NameRu}, БИН {trd.TaxAuthorityBin}, ИИК КZ24070105KSN0000000, КБК {trd.Kbk}, КБе {trd.Kbe}, КНП {trd.Knp}, БИК KKMFKZ2А, Комитет казначейства РК"
            };

            ПраваИОбязанностиСторон = new ПраваИОбязанностиСторонМодель { };
            ЗаключительныеПоложения = new ЗаключительныеПоложенияМодель { };

            Реквизиты = new РеквизитыМодель
            {
                Продавец = sellerCorp.BankAccount != null ? $"{sellerCorp.Account.NameRu}, БИН {sellerCorp.CorpData.Bin}, {new BankSearchCollection().GetItem(sellerCorp.BankAccount.Bic, env.RequestContext).Name}, БИК {sellerCorp.BankAccount.Bic}, ИИК {sellerCorp.BankAccount.Iban}, {string.Join(", ", sellerCorp.AccountAddresses.Select(x => YodaUserHelpers.ToAddressString(x)))}" : $"Не найдены банковские реквизиты для {sellerCorp.Account.NameRu}. Укажите их в профиле, чтобы избежать подобных ошибок",
                Покупатель = $"{winner.FullOrgXinName}, {winner.ParticipiantBankDetails.BankName}, БИК {winner.ParticipiantBankDetails.BIK}, ИИК {winner.ParticipiantBankDetails.IIK}, {winner.AddressInfo}"
            };
        }

        public override void TranslateModel(ActionEnv<DefaultAgrTemplateArgs> env)
        {
            var obj = LandObjectModelHelper.GetObjectModel(env.Args.ObjectId, env.QueryExecuter);
            var trd = LandObjectTradeModelHelper.GetTradeModel(env.Args.TradeId, env.QueryExecuter);
            var auctionId = LandObjectTradeModelHelper.GetTradeAuctionId(env.Args.TradeId, env.QueryExecuter);

            var sellerCorp = env.User.GetAccountData(env.QueryExecuter);
            var sellerUser = env.User.GetUserData(env.QueryExecuter);
            var winner = trd.WinnerData;

            switch (Language)
            {
                case "kz":
                    {
                        Договор.УполномоченныйОрган.Название = sellerCorp.Account.NameKz;

                        var refAr = RefAr.Instance;
                        ПредметДоговора.РешениеОт = "20__ жылғы «__» ____";
                        ПредметДоговора.СрокАренды = $"{(trd.OwnershipMonths.Value / 12)} ({NumberToString((trd.OwnershipMonths.Value / 12), "kz")})";
                        ПредметДоговора.Адрес = $"{Translate(env.RequestContext, Language, refAr.Search(obj.Country).Text.Text)}, {Translate(env.RequestContext, Language, refAr.Search(obj.Region).Text.Text)}, {Translate(env.RequestContext, Language, refAr.Search(obj.District).Text.Text)}, {obj.Address}";

                        ЦенаЗемельногоУчастка.АктОценкиОт = "20__ жылғы «__» ____";
                        ЦенаЗемельногоУчастка.ДатаТоргов = trd.DateTime.Value.ToString("yyyy жылғы «dd» MMMM", new System.Globalization.CultureInfo("kk"));


                        long objCost = Convert.ToInt64(Math.Ceiling(obj.Cost.Value));
                        long trdCost = Convert.ToInt64(Math.Ceiling(trd.Cost.Value));
                        long trdInitialCost = Convert.ToInt64(Math.Ceiling(trd.InitialCost.Value));
                        var taxOrgsSearchCollection = new TaxAndMsuOrgsSearchCollection();
                        ЦенаЗемельногоУчастка.ОценочнаяСоставляет = $"{obj.Cost:#,0.} теңгені ({NumberToString(objCost, "kz")} теңге)";
                        ЦенаЗемельногоУчастка.ПродажиСоставляет = $"{trd.Cost:#,0.} теңгені ({NumberToString(trdCost, "kz")} теңге)";
                        ЦенаЗемельногоУчастка.НачальнаяСоставляет = $"{trd.InitialCost:#,0.} теңгені ({NumberToString(trdInitialCost, "kz")} теңге)";
                        ЦенаЗемельногоУчастка.ОплатаПоРеквизитам = $"{taxOrgsSearchCollection.GetItem(trd.TaxAuthorityBin, env.RequestContext).NameKz}, БСН {trd.TaxAuthorityBin}, ЖСК КZ24070105KSN0000000, БСК {trd.Kbk}, БК {trd.Kbe}, ТТК {trd.Knp}, БСК KKMFKZ2А, ҚР Қаржы министрлігінің Қазынашылық комитеті";

                        Реквизиты.Продавец = sellerCorp.BankAccount != null ? $"{sellerCorp.Account.NameKz}, БИН {sellerCorp.CorpData.Bin}, {new BankSearchCollection().GetItem(sellerCorp.BankAccount.Bic, env.RequestContext).Name}, БИК {sellerCorp.BankAccount.Bic}, ИИК {sellerCorp.BankAccount.Iban}, {string.Join(", ", sellerCorp.AccountAddresses.Select(x => YodaUserHelpers.ToAddressString(x)))}" : $"Не найдены банковские реквизиты для {sellerCorp.Account.NameRu}. Укажите их в профиле, чтобы избежать подобных ошибок";
                        break;
                    }
                default:
                    {
                        throw new NotImplementedException($"Unknown language: {Language}");
                    }
            };
        }

        public override string GetContent()
        {
            var template = string.Empty;

            switch (Language)
            {
                case "ru":
                    {
                        template += new DocumentBuilder()
                            .Doc(doc =>
                            {
                                doc.AddSection(s => s.Body(b => b
                                    .Div("ДОГОВОР № {{ DocNumber }}", new CssClass("text-center font-weight-bold"))
                                    .Div("КУПЛИ-ПРОДАЖИ ПРАВА АРЕНДЫ ЗЕМЕЛЬНОГО УЧАСТКА", new CssClass("text-center font-weight-bold"))
                                    .BrTag()
                                    .Div("{{ ГородПосёлокСело }}")
                                    .BrTag()
                                    .Paragraph("Мы, нижеподписавшиеся, {{ Договор.УполномоченныйОрган.Название }} в лице {{ Договор.УполномоченныйОрган.ВЛице }}, действующего на основании {{ Договор.УполномоченныйОрган.НаОсновании }}, именуемый в дальнейшем «Продавец», с одной стороны, и {{ Договор.Покупатель.Название }} в лице {{ Договор.Покупатель.ВЛице }} действующего на основании {{ Договор.Покупатель.НаОсновании }} именуемый в дальнейшем «Покупатель», с другой стороны, заключили настоящий договор купли-продажи права аренды земельного участка (далее – Договор) о нижеследующем:")
                                    .BrTag()

                                    .Div("1. Предмет договора", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("1. На основании решения местного исполнительного органа от {{ ПредметДоговора.РешениеОт }} № {{ ПредметДоговора.РешениеНомер }} Продавец продает, а Покупатель приобретает право аренды земельного участка сроком на {{ ПредметДоговора.СрокАренды }} года (лет).")
                                    .Paragraph("2. Месторасположение земельного участка и его данные:")
                                    .Paragraph("кадастровый номер: {{ ПредметДоговора.КадастровыйНомер }}")
                                    .Paragraph("адрес: {{ ПредметДоговора.Адрес }}")
                                    .Paragraph("площадь, га: {{ ПредметДоговора.Площадь | math.format'0.#############' }}")
                                    .Paragraph("целевое назначение: {{ ПредметДоговора.ЦелевоеНазначение }}")
                                    .Paragraph("ограничения в использовании и обременения: {{ ПредметДоговора.ОграниченияВИспользованииИОбременения }}")
                                    .Paragraph("делимость (неделимость): {{ ПредметДоговора.Делимость }}")
                                    .BrTag()

                                    .Div("2. Цена права аренды земельного участка", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("3. Кадастровая (оценочная) стоимость земельного участка, определена согласно акта определения кадастровой (оценочной) стоимости земельного участка от {{ ЦенаЗемельногоУчастка.АктОценкиОт }} № {{ ЦенаЗемельногоУчастка.АктОценкиНомер }} и составляет {{ ЦенаЗемельногоУчастка.ОценочнаяСоставляет }}. Кадастровая (оценочная) стоимость определена {{ ЦенаЗемельногоУчастка.ОценочнаяОпределенаОрганизацией }}.")
                                    .Paragraph("Начальная цена при продаже права аренды земельного участка рассчитана дифференцировано в процентах от кадастровой стоимости земельного участка и составляет {{ ЦенаЗемельногоУчастка.НачальнаяСоставляет }}.")
                                    .Paragraph("4. Цена продажи права аренды земельного участка (далее - цена продажи) по результатам электронных торгов № {{ ЦенаЗемельногоУчастка.НомерТоргов }}, проведенных {{ ЦенаЗемельногоУчастка.ДатаТоргов }}, составляет {{ ЦенаЗемельногоУчастка.ПродажиСоставляет }} и подлежит уплате Покупателем Организатору в следующем порядке:")
                                    .Paragraph("Покупатель должен оплатить 50% (с учетом ранее внесенного гарантийного взноса для участия в торгах) не позднее двух рабочих дней со дня подписания настоящего Договора, оставшуюся сумму Покупатель должен оплатить в течение 30 календарных дней со дня подписания настоящего Договора.")
                                    .Paragraph("5. Оплата цены продажи осуществляется по следующим реквизитам: Акционерное общество «Информационно-учетный центр»; БИН: 050540004455, ИИК: KZ946017111000000330; БИК: HSBKKZKX; КНП: 730; Кбе: 16.")
                                    .BrTag()

                                    .Div("3. Права и обязанности сторон", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("6. Покупатель имеет право:")
                                    .Paragraph("1) самостоятельно хозяйствовать на земле, используя ее в целях, вытекающих из целевого назначения земельного участка согласно Земельному кодексу Республики Казахстан (далее – Кодекс);")
                                    .Paragraph("2) на возмещение убытков в полном объеме при принудительном отчуждении земельного участка для государственных нужд;")
                                    .Paragraph("3) иное: {{ ПраваИОбязанностиСторон.ПокупательИмеетПравоИное }}.")
                                    .Paragraph("7. Покупатель обязан:")
                                    .Paragraph("1) своевременно оплатить цену продажи в соответствии с пунктом 4 настоящего Договора;")
                                    .Paragraph("2) известить Продавца об оплате цены продажи в течение 10 календарных дней, либо в случае невозможности исполнения договорных обязательств в части оплаты цены продажи в срок, установленный пунктом 4 настоящего Договора, путем письменного уведомления;")
                                    .Paragraph("3) использовать землю в соответствии с его целевым назначением в порядке, предусмотренном настоящим Договором, и требованиями земельного законодательства Республики Казахстан;")
                                    .Paragraph("4) в случае необходимости обеспечивать предоставление сервитутов в порядке, предусмотренном Кодексом;")
                                    .Paragraph("5) не нарушать права других собственников и землепользователей;")
                                    .Paragraph("6) не допускать нарушений земельного законодательства Республики Казахстан;")
                                    .Paragraph("7) при осуществлении хозяйственной и иной деятельности на земельном участке соблюдать строительные, экологические, санитарно-гигиенические и иные специальные требования (нормы, правила, нормативы);")
                                    .Paragraph("8) в случае обнаружения объектов, имеющих историческую, научную, художественную и иную культурную ценность, приостановить дальнейшее ведение работ и сообщить об этом уполномоченному органу по охране и использованию объектов историко-культурного наследия;")
                                    .Paragraph("9) своевременно и в полном объеме уплачивать плату за пользование земельным участком в соответствии с Налоговым кодексом РК;")
                                    .Paragraph("10) известить Продавца обо всех возникающих обременениях и ограничениях своих прав аренды земельного участка;")
                                    .Paragraph("11) в случае неисполнения обязанности по оплате цены продажи в установленный пунктом 4 настоящего Договора срок, в течение 30 календарных дней оплатить пеню (неустойку)на просроченный срок со дня, когда сумма цены продажи должна была быть оплачена до дня оплаты цены продажи Покупателем.")
                                    .Paragraph("Сумма пени (неустойки) исчисляется исходя из официальной ставки рефинансирования Национального Банка Республики Казахстан за каждый календарный день просрочки.")
                                    .Paragraph("12) в срок, указанный в решении местного исполнительного органа о предоставлении права аренды земельного участка разработать проект рекультивации нарушенных земель (в случае наличия данного условия);")
                                    .Paragraph("13) иное: {{ ПраваИОбязанностиСторон.ПокупательОбязанИное }}.")
                                    .Paragraph("8. Продавец имеет право:")
                                    .Paragraph("1) осуществлять контроль над исполнением условий в части своевременной оплаты цены продажи согласно настоящего Договора;")
                                    .Paragraph("2) иное: {{ ПраваИОбязанностиСторон.ПродавецИмеетПравоИное }}.")
                                    .Paragraph("9. Продавец обязан:")
                                    .Paragraph("1) передать Покупателю право аренды в соответствии с условиями настоящего Договора;")
                                    .Paragraph("2) известить Покупателя обо всех обременениях и ограничениях прав на земельный участок;")
                                    .Paragraph("3) иное: {{ ПраваИОбязанностиСторон.ПродавецОбязанИное }}.")
                                    .BrTag()

                                    .Div("4. Порядок внесения изменений и (или) дополнений, а также  порядок расторжения договора", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("10. Все изменения и дополнения, вносимые по договоренности сторон в настоящий Договор, не должны противоречить положениям настоящего Договора, оформляются в виде дополнительного соглашения, подписываются уполномоченными представителями сторон и оформляются в установленном законодательством порядке.")
                                    .Paragraph("11. Настоящий Договор может быть расторгнут:")
                                    .Paragraph("1) в одностороннем порядке по решению суда при нарушении сторонами условий, предусмотренных настоящим Договором;")
                                    .Paragraph("2) по соглашению сторон в любое время, в случае неисполнения условий, предусмотренных в пункте 4 настоящего Договора, при условии обязательной оплаты пени (неустойки) за неисполнение договорных обязательств, предусмотренных в подпункте 11) пункта 7 настоящего Договора.")
                                    .BrTag()

                                    .Div("5. Особые условия", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("12. Право аренды на земельный участок наступает у Покупателя после выполнения следующих условий:")
                                    .Paragraph("1) полной оплаты цены продажи;")
                                    .Paragraph("2) регистрации настоящего Договора в порядке, предусмотренном законодательством Республики Казахстан;")
                                    .Paragraph("3) заключения договора аренды земельного участка;")
                                    .Paragraph("4) иное: {{ ОсобыеУсловияИное }}.")
                                    .BrTag()

                                    .Div("6. Ответственность сторон", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("13. Стороны несут ответственность за невыполнение, либо ненадлежащее выполнение условий настоящего Договора в соответствии с действующим законодательством Республики Казахстан.")
                                    .Paragraph("14. Меры ответственности сторон, не предусмотренные в настоящем Договоре применяются в соответствии с нормами земельного законодательства Республики Казахстан.")
                                    .BrTag()
                                    
                                    .Div("7. Порядок рассмотрения споров", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("15. Любые разногласия или претензии, которые могут возникнуть по настоящему Договору или связанные с его действием, разрешаются путем переговоров между сторонами.")
                                    .Paragraph("16. Все разногласия, вытекающие из настоящего Договора, которые не решаются путем переговоров, разрешаются в судебном порядке или по соглашению сторон рассматривается в порядке медиации.")
                                    .BrTag()
                                    
                                    .Div("8. Обстоятельства непреодолимой силы", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("17. Стороны освобождаются от ответственности за частичное или полное неисполнение обязательств по настоящему Договору, если надлежащее исполнение оказалось невозможным вследствие обстоятельств непреодолимой силы, включая стихийные бедствия, военные действия, забастовки, народные волнения, также запретительные меры, предусмотренные в правовых актах государственных органов Республики Казахстан, если эти обстоятельства непосредственно повлияли на исполнение сторонами своих обязательств по настоящему Договору.")
                                    .Paragraph("18. Сторона, для которой создалась невозможность исполнения обязательств по настоящему Договору вследствие обстоятельств непреодолимой силы, обязана в срок не позднее 5 (пяти) рабочих дней с момента их наступления письменно уведомить об этом другую сторону и представить соответствующие доказательства.")
                                    .Paragraph("19. Обстоятельства, указанные в пункте 17 должны подтверждаться компетентными государственными органами и организациями.")
                                    .Paragraph("20. Ненадлежащее уведомление, лишает сторону права ссылаться на любое вышеуказанное обстоятельство как основание, освобождающее от ответственности за неисполнение или ненадлежащее исполнение обязательств по настоящему Договору.")
                                    .Paragraph("21. После прекращения обстоятельств непреодолимой силы стороны незамедлительно возобновляют исполнение обязательств по настоящему Договору.")
                                    .BrTag()
                                    
                                    .Div("9. Заключительные положения", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("22. Настоящий Договор вступает в силу с момента его подписания последней из Сторон с использованием электронной цифровой подписи на веб-портале реестра государственного имущества.")
                                    .Paragraph("При этом, датой заключения настоящего договора определяется дата его подписания с ЭЦП последней из Сторон.")
                                    .Paragraph("23. Настоящий Договор составлен в двух экземплярах, один из которых передается Покупателю, другой – Продавцу.")
                                    .Paragraph("24. Иное: {{ ЗаключительныеПоложения.Иное }}.")
                                    .BrTag()

                                    .Div("10. Юридические адреса и реквизиты сторон", new CssClass("text-center font-weight-bold"))
                                    .Table(new[] { new DocTableCol("Продавец", "«Продавец»", 50, "vertical-align-top text-align-justify p-0-10-px"), new DocTableCol("Покупатель", "«Покупатель»", 50, "vertical-align-top text-align-justify p-0-10-px") }, new РеквизитыМодель[] { Реквизиты }, tableCssClass: "wide-table")
                                ));
                            }).Build();
                        break;
                    }
                case "kz":
                    {
                        template += new DocumentBuilder()
                            .Doc(doc =>
                            {
                                doc.AddSection(s => s.Body(b => b
                                    .Div("ЖЕР УЧАСКЕСІН ЖАЛДАУ ҚҰҚЫҒЫН", new CssClass("text-center font-weight-bold"))
                                    .Div("САТЫП АЛУ-САТУДЫҢ ШАРТЫ № {{ DocNumber }}", new CssClass("text-center font-weight-bold"))
                                    .BrTag()
                                    .Div("{{ ГородПосёлокСело }}")
                                    .BrTag()
                                    .Paragraph("Біз, төменде қол қойғандар, бұдан әрі «Сатушы» деп аталатын {{ Договор.УполномоченныйОрган.Название }} атынан {{ Договор.УполномоченныйОрган.НаОсновании }} негізінде әрекет ететін {{ Договор.УполномоченныйОрган.ВЛице }}, бір тараптан және бұдан әрі «Сатып алушы» деп аталатын, {{ Договор.Покупатель.Название }} атынан {{ Договор.Покупатель.НаОсновании }} негізінде әрекет ететін {{ Договор.Покупатель.ВЛице }} екінші тараптан, төмендегілер туралы осы Жер учаскесін жалдау құқығын сатып алу-сатудың үлгілік шарты (бұдан әрі – Шарт) жасастық:")
                                    .BrTag()

                                    .Div("1. Шарттың нысанасы", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("1. Жергілікті атқарушы органның {{ ПредметДоговора.РешениеОт }} № {{ ПредметДоговора.РешениеНомер }} шешімі негізінде Сатушы сатады, ал Сатып алушы {{ ПредметДоговора.СрокАренды }} жыл мерзімге жер учаскесін жалға алу құқығына ие болады.")
                                    .Paragraph("2. Жер учаскесінің орналасқан жері және оның деректері:")
                                    .Paragraph("кадастрлық (бірегей) нөмірі: {{ ПредметДоговора.КадастровыйНомер }}")
                                    .Paragraph("мекенжайы: {{ ПредметДоговора.Адрес }}")
                                    .Paragraph("алаңы, гектар: {{ ПредметДоговора.Площадь | math.format'0.#############' }}")
                                    .Paragraph("нысаналы мақсаты: {{ ПредметДоговора.ЦелевоеНазначение }}")
                                    .Paragraph("пайдаланудағы шектеулер және ауыртпалықтар: {{ ПредметДоговора.ОграниченияВИспользованииИОбременения }}")
                                    .Paragraph("бөлінетіндігі немесе бөлінбейтіндігі: {{ ПредметДоговора.Делимость }}")
                                    .BrTag()

                                    .Div("2. Жер учаскесін жалдау құқығының бағасы", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("3. Жер учаскесінің кадастрлық (бағалау) құнын {{ ЦенаЗемельногоУчастка.АктОценкиОт }} № {{ ЦенаЗемельногоУчастка.АктОценкиНомер }} жер учаскесінің кадастрлық (бағалау) құнын айқындау актісіне сәйкес айқындайды және {{ ЦенаЗемельногоУчастка.ОценочнаяСоставляет }} құрайды. Кадастрлық (бағалау) құны анықталды {{ ЦенаЗемельногоУчастка.ОценочнаяОпределенаОрганизацией }}.")
                                    .Paragraph("Жер учаскесін жалдау құқығын сату кезіндегі бастапқы баға жер учаскесінің кадастрлық құнынан пайызбен сараланып есептелген және {{ ЦенаЗемельногоУчастка.НачальнаяСоставляет }} құрайды")
                                    .Paragraph("4. Жер учаскесін жалдау құқығын сатып алу бағасы (бұдан әрі – сату бағасы) {{ ЦенаЗемельногоУчастка.ДатаТоргов }} өткізілген № {{ ЦенаЗемельногоУчастка.НомерТоргов }} электрондық сауда-саттық нәтижесінде айқындалды және {{ ЦенаЗемельногоУчастка.ПродажиСоставляет }} құрайды және Сатып алушымен Ұйымдастырушының есебіне мынадай тәртіппен төленуге тиіс:")
                                    .Paragraph("Сатып алушы сату бағасының 50 %-ын (аукционға қатысу үшін төленген кепілдік жарнасын қоса алғанда) осы келісімшартқа қол қойылған күннен бастап 2 (екі) жұмыс күннен кешіктірмей, ал қалған соманы шартқа қол қойылғаннан бастап 30 (отыз) күнтізбелік күн ішінде  төлеуі тиіс.")
                                    .Paragraph("5. Сату бағасын төлеу мынадай деректемелер бойынша жүзеге асырылады: «Ақпараттық-есептеу орталығы» акционерлік қоғамы; БСН: 050540004455, ИИК: KZ946017111000000330; БСК: HSBKKZKX; ТТК: 730; Кбе: 16.")
                                    .BrTag()

                                    .Div("3. Тараптардың құқықтары мен міндеттері", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("6. Сатып алушы:")
                                    .Paragraph("1) Қазақстан Республикасының Жер кодексіне (бұдан әрі – Кодекс) сәйкес жер учаскесінің нысаналы мақсатынан туындайтын мақсаттарда оны пайдалана отырып, жерде дербес шаруашылық жүргізуге;")
                                    .Paragraph("2) жер учаскесін мемлекет мұқтаждықтары үшін мәжбүрлеп иеліктен шығарған жағдайда шығындарды толық көлемде өтеуге;")
                                    .Paragraph("3) өзге: {{ ПраваИОбязанностиСторон.ПокупательИмеетПравоИное }}.")
                                    .Paragraph("7. Сатып алушы:")
                                    .Paragraph("1) осы Шарттың 4-тармағына сәйкес сату бағасын уақтылы төлеуге;")
                                    .Paragraph("2) Сатушыға күнтізбелік 10 күн ішінде сату бағасын төлеу туралы неосы Шарттың 4-тармағында белгіленген мерзімде сату бағасын төлеу бөлігінде шарттық міндеттемелерді орындау мүмкін болмаған жағдайда жазбаша хабарлама арқылы хабарлауға; ")
                                    .Paragraph("3) жерді оның нысаналы мақсатына сәйкес және Қазақстан Республикасының жер заңнамасының талаптарына және осы Шартта көзделген тәртіппен пайдалануға;")
                                    .Paragraph("4) қажет болған жағдайда Кодексте көзделген тәртіппен сервитуттер беруді қамтамасыз етуге;")
                                    .Paragraph("5) басқа меншік иелері мен жер пайдаланушылардың құқықтарын бұзбауға;")
                                    .Paragraph("6) Қазақстан Республикасының жер заңнамасын бұзуға жол бермеуге;")
                                    .Paragraph("7) жер учаскесінде шаруашылық және өзге де қызметті жүзеге асыру кезінде құрылыс, экологиялық, санитариялық-гигиеналық және өзге де арнайы талаптарды (нормаларды, қағидаларды, нормативтерді) сақтауға;")
                                    .Paragraph("8) тарихи, ғылыми, көркемдік және өзге де мәдени құндылығы бар объектілер табылған жағдайда, жұмыстарды одан әрі жүргізуді тоқтата тұруға және бұл туралы тарихи-мәдени мұра объектілерін қорғау және пайдалану жөніндегі уәкілетті органға хабарлауға;")
                                    .Paragraph("9) ҚР Салық кодексіне сәйкес, жер учаскесін пайдаланғаны үшін төлемді уақтылы және толық көлемде төлеуге;")
                                    .Paragraph("10) жер учаскесін жалдау құқығының пайда болған барлық ауыртпалықтары мен шектеулері туралы хабарлауға;")
                                    .Paragraph("11) Осы шарттың 4-тармағында белгіленген мерзімде берілген сату бағасына төлем жасау жөніндегі міндет орындалмаған жағдайда, Сатып алушы сату бағасын төлем жасалған күнге дейін сату бағасын сома төленуі тиіс күннен бастап мерзімі өткен мерзімге өсімпұлды (тұрақсыздық айыбын) күнтізбелік 30 күн ішінде төлеуге;")
                                    .Paragraph("Өсімақы сомасы (тұрақсыздық айыбы) Қазақстан Республикасы Ұлттық Банкінің ресми қайта қаржыландыру мөлшерлемесін негізге ала отырып, мерзімі өткен әрбір күнтізбелік күн үшін есептеледі.")
                                    .Paragraph("12) жергілікті атқарушы органның жер учаскесін жалдау құқығын беру туралы шешімінде көрсетілген мерзімде бүлінген жерлерді қалпына келтіру жобасын әзірлеуге (осы шарт болған жағдайда);")
                                    .Paragraph("13) өзге: {{ ПраваИОбязанностиСторон.ПокупательОбязанИное }}.")
                                    .Paragraph("8. Сатушы:")
                                    .Paragraph("1) осы Шартқа сәйкес сату бағасын уақтылы төлеу бөлігінде талаптардың орындалуын бақылауды жүзеге асыруға;")
                                    .Paragraph("2) өзге: {{ ПраваИОбязанностиСторон.ПродавецИмеетПравоИное }}.")
                                    .Paragraph("9. Сатушы:")
                                    .Paragraph("1) Сатып алушыға жер учаскесін осы Шарттың талаптарына сәйкес беруге;")
                                    .Paragraph("2) Сатып алушыны жер учаскесіне арналған барлық ауыртпалықтар мен құқықтардың шектеулері туралы хабардар етуге;")
                                    .Paragraph("3) өзге: {{ ПраваИОбязанностиСторон.ПродавецОбязанИное }}.")
                                    .BrTag()

                                    .Div("4. Өзгерістер және (немесе) толықтырулар енгізу тәртібі, сондай-ақ шартты бұзу тәртібі", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("10. Тараптардың уағдаластығы бойынша осы Шартқа енгізілетін барлық өзгерістер мен толықтырулар осы Шарттың ережелеріне қайшы келмеуге тиіс, қосымша келісім түрінде ресімделеді, тараптардың уәкілетті өкілдері қол қояды және заңнамада белгіленген тәртіппен ресімделеді.")
                                    .Paragraph("11. Осы Шарт:")
                                    .Paragraph("1) тараптар осы Шартта көзделген талаптарды бұзған кезде сот шешімі бойынша біржақты тәртіппен;")
                                    .Paragraph("2) осы Шарттың 4-тармағында көзделген талаптарды орындамаған жағдайда, осы Шарттың 7-тармағының 12) тармақшасында көзделген шарттық міндеттемелерді орындамағаны үшін өсімпұлды (тұрақсыздық айыбын) міндетті түрде төлеу шартымен тараптардың келісімі бойынша кез келген уақытта бұзылуы мүмкін.")
                                    .BrTag()

                                    .Div("5. Ерекше шарттар", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("12. Жер учаскесін жалдау құқығы Сатып алушыда мынадай шарттар орындалғаннан кейін:")
                                    .Paragraph("1) сату бағасын толық төлегенде;")
                                    .Paragraph("2) осы Шартты Қазақстан Республикасының заңдарында көзделген тәртіппен тіркегенде;")
                                    .Paragraph("3) жер учаскесін жалдау шартын жасасу;")
                                    .Paragraph("4) өзге: {{ ОсобыеУсловияИное }}.")
                                    .BrTag()

                                    .Div("6. Тараптардың жауапкершілігі", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("13. Тараптар осы Шарттың талаптарын орындамағаны не тиісінше орындамағаны үшін Қазақстан Республикасының қолданыстағы заңнамасына сәйкес жауапкершілікте болады.")
                                    .Paragraph("14. Осы Шартта көзделмеген тараптардың жауапкершілік шаралары Қазақстан Республикасының жер заңнамасының нормаларына сәйкес қолданылады.")
                                    .BrTag()

                                    .Div("7. Дауларды қарау тәртібі", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("15. Осы Шарт бойынша немесе оның қолданылуынабайланысты туындауы мүмкін кез келген келіспеушіліктер немесе наразылықтар тараптар арасындағы келіссөздер арқылы шешіледі.")
                                    .Paragraph("16. Осы Шарттан туындайтын, келіссөздер арқылы шешілмейтін барлық келіспеушіліктер сот тәртібінде шешіледі немесе тараптардың келісуі бойынша медиация тәртібімен қаралады.")
                                    .BrTag()

                                    .Div("8. Еңсерілмейтін күш мән-жайлары", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("17. Егер тиісінше орындау дүлей зілзалалар, әскери іс-қимылдар, ереуілдер, халықтық толқулар, сондай-ақ Қазақстан Республикасы мемлекеттік органдарының құқықтық актілерінде көзделген тыйым салу шараларын қоса алғанда еңсерілмейтін күш мән-жайлары салдарынан мүмкін болмаса, егер бұл мән-жайлар тараптардың осы Шарт бойынша өз міндеттемелерін орындауына тікелей әсер еткен болса, тараптар осы Шарт бойынша міндеттемелерді ішінара немесе толық орындамағаны үшін жауапкершіліктен босатылады.")
                                    .Paragraph("18. Еңсерілмейтін күш мән-жайлары салдарынан осы Шарт бойынша міндеттемелерді орындау мүмкін болмаған тарап олар басталған сәттен бастап 5 (бес) жұмыс күнінен кешіктірмей бұл туралы екінші тарапты жазбаша хабардар етуге және тиісті дәлелдемелерді ұсынуға міндетті.")
                                    .Paragraph("19. 17-тармақта көрсетілген мән-жайлар құзыретті мемлекеттік органдармен және ұйымдармен расталуы тиіс.")
                                    .Paragraph("20. Тиісті деңгейде хабардар етпеу, тарапты осы Шарт бойынша міндеттемелерді орындамағаны немесе тиісінше орындамағаны үшін жауапкершіліктен босататын негіз ретінде жоғарыда көрсетілген кез келген мән-жайға сілтеме жасау құқығынан айырады.")
                                    .Paragraph("21. Еңсерілмейтін күш мән-жайлары тоқтатылғаннан кейін тараптар осы Шарт бойынша міндеттемелерді орындауды дереу жаңартады.")
                                    .BrTag()

                                    .Div("9. Қорытынды ережелер", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("22. Осы Шарт Мемлекеттік мүлік тізілімінің веб-порталында электрондық цифрлық қолтаңбаны пайдалана отырып, Тараптардың соңғысы қол қойған сәттен бастап күшіне енеді.")
                                    .Paragraph("Бұл ретте, осы Шарттың жасалған күні Тараптардың соңғысының ЭЦҚ-мен қол қойылған күні айқындалады.")
                                    .Paragraph("23. Өзге: {{ ЗаключительныеПоложения.Иное }}.")
                                    .BrTag()

                                    .Div("10.Тараптардың заңды мекенжайлары және деректемелері", new CssClass("text-center font-weight-bold"))
                                    .Table(new[] { new DocTableCol("Продавец", "«Сатушы»", 50, "vertical-align-top text-align-justify p-0-10-px"), new DocTableCol("Покупатель", "«Сатып алушы»", 50, "vertical-align-top text-align-justify p-0-10-px") }, new РеквизитыМодель[] { Реквизиты }, tableCssClass: "wide-table")
                                ));
                            }).Build();

                        break;
                    }
                default:
                    {
                        throw new NotImplementedException($"Неописанный язык: {Language}");
                    }
            }

            var html = new ScribanRenderBuilder()
                .SetTemplate(template)
                .UseDefaultContext(this)
                .Render();

            return html;
        }

        public override bool HasAccessToCreate(ActionEnv<DefaultAgrTemplateArgs> env)
        {
            var objectId = env.Args.ObjectId;
            if (objectId == 0)
            {
                objectId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flObjectId, env.QueryExecuter).Value;
            }
            var sellerBin = new TbLandObjects().AddFilter(t => t.flId, objectId).SelectScalar(t => t.flSallerBin, env.QueryExecuter);
            var currentUser = env.User.GetUserXin(env.QueryExecuter);
            return sellerBin == currentUser && env.User.HasRole("TRADERESOURCES-Земельные ресурсы-Создание приказов", env.QueryExecuter)/*env.User.HasCustomRole("landobjects", "appLandEdit", env.QueryExecuter)*/;
        }
        public override bool HasAccessToSign(ActionEnv<DefaultAgrTemplateArgs> env)
        {
            var objectId = env.Args.ObjectId;
            if (objectId == 0)
            {
                objectId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flObjectId, env.QueryExecuter).Value;
            }
            var sellerBin = new TbLandObjects().AddFilter(t => t.flId, objectId).SelectScalar(t => t.flSallerBin, env.QueryExecuter);
            var currentUser = env.User.GetUserXin(env.QueryExecuter);
            return sellerBin == currentUser && env.User.HasRole("TRADERESOURCES-Земельные ресурсы-Создание приказов", env.QueryExecuter)/*env.User.HasCustomRole("landobjects", "appLandEdit", env.QueryExecuter)*/;
        }
        public override void OnSignEnd(ActionEnv<DefaultAgrTemplateArgs> env, ITransaction transaction)
        {
            LandObjectModelHelper.SetBlock(AgreementHelper.GetAgreementObjectId(env.Args.AgreementId, env.QueryExecuter), LandObjectBlocks.SaledAgr, env.QueryExecuter, transaction);
        }

        public override PaymentAndOverpaymentRequisitesModel GetPaymentAndOverpaymentRequisites(ActionEnv<DefaultAgrTemplateArgs> env)
        {
            if (env.Args.TradeId == 0)
            {
                env.Args.TradeId = AgreementHelper.GetAgreementTradeId(env.Args.AgreementId, env.QueryExecuter);
            }
            var trd = LandObjectTradeModelHelper.GetTradeModel(env.Args.TradeId, env.QueryExecuter);
            return new PaymentAndOverpaymentRequisitesModel()
            {
                flPayment = new RequisitesModel()
                {
                    flName = new GrObjectSearchCollection().GetItem(trd.TaxAuthorityBin, env.RequestContext).ObjectData.NameRu,
                    flXin = trd.TaxAuthorityBin,
                    flBik = trd.Bik,
                    flIban = trd.Iik,
                    flKbe = trd.Kbe,
                    flKnp = trd.Knp,
                    flKbk = trd.Kbk
                },
                flOverPayment = new RequisitesModel()
                {
                    flName = $"{trd.WinnerData.CorpName} {trd.WinnerData.LastName} {trd.WinnerData.FirstName} {trd.WinnerData.MiddleName}",
                    flXin = trd.WinnerData.Xin,
                    flBik = trd.WinnerData.ParticipiantBankDetails.BIK,
                    flIban = trd.WinnerData.ParticipiantBankDetails.IIK,
                    flKbe = int.TryParse(trd.WinnerData.ParticipiantBankDetails.KBE, out var flKbe) ? (int?)flKbe : null,
                    flKnp = null,
                    flKbk = null,
                    flContacts = trd.WinnerData.ContactInfo
                }
            };
        }

        public override SidesAccountsData GetSidesAccountData(ActionEnv<DefaultAgrTemplateArgs> env) {
            if (env.Args.TradeId == 0) {
                env.Args.TradeId = AgreementHelper.GetAgreementTradeId(env.Args.AgreementId, env.QueryExecuter);
            }
            var trd = LandObjectTradeModelHelper.GetTradeModel(env.Args.TradeId, env.QueryExecuter);
            return new SidesAccountsData() {
                flWinner = new SideAccountData() {
                    flXin = trd.WinnerData.Xin,
                    flName = trd.WinnerData.FullOrgXinName,
                    flAccountType = trd.WinnerData.UserType
                },
                flSeller = new SideAccountData() {
                    flXin = trd.CompetentOrgBin,
                    flName = new GrObjectSearchCollection().GetItem(trd.CompetentOrgBin, env.RequestContext).ObjectData.NameRu,
                    flAccountType = "Corporate"
                }
            };
        }

        public override PaymentItemModel[] GetGuaranteePayments(ActionEnv<DefaultAgrTemplateArgs> env) {
            if (env.Args.TradeId == 0) {
                env.Args.TradeId = AgreementHelper.GetAgreementTradeId(env.Args.AgreementId, env.QueryExecuter);
            }
            var trd = LandObjectTradeModelHelper.GetTradeModel(env.Args.TradeId, env.QueryExecuter);
            return JsonConvert.DeserializeObject<PaymentItemModel[]>(JsonConvert.SerializeObject(trd.WinnerData.GuaranteePayments)).ToArray();
        }

        public override decimal? GetSellPrice(ActionEnv<DefaultAgrTemplateArgs> env)
        {
            var tradeId = env.Args.TradeId;
            if (tradeId == 0)
            {
                tradeId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flTradeId, env.QueryExecuter).Value;
            }
            var flcost = new TbLandObjectsTrades().AddFilter(t => t.flId, tradeId).SelectScalar(t => t.flCost, env.QueryExecuter);
            return flcost;
        }

        public override DateTime SignAvailableDate(ActionEnv<DefaultAgrTemplateArgs> env) {
            var signAvailableDays = 2;
            var tradeId = env.Args.TradeId;
            if (tradeId == 0) {
                tradeId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flTradeId, env.QueryExecuter).Value;
            }
            var createDateTime = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flAgreementCreateDate, env.QueryExecuter).Value;
            var signAvailableDate = new DateTime(createDateTime.Year, createDateTime.Month, createDateTime.Day).AddWorkingDays(signAvailableDays + 1, env.QueryExecuter).AddMilliseconds(-1);
            if (new TbLandObjectsTrades().AddFilter(t => t.flId, tradeId).AddFilter(t => t.flIsSaleProtocolExists, true).Count(env.QueryExecuter) > 0) {
                var saleProtocolDate = new TbLandObjectsTrades().AddFilter(t => t.flId, tradeId).SelectScalar(t => t.flSaleProtocolDate, env.QueryExecuter).Value;
                signAvailableDate = new DateTime(saleProtocolDate.Year, saleProtocolDate.Month, saleProtocolDate.Day).AddWorkingDays(signAvailableDays + 1, env.QueryExecuter).AddMilliseconds(-1);
            }
            var agreementExtendedModels = new TbAgreements() { Name = "z_history_tbagreements" }
                .AddFilter(t => t.flAgreementId, env.Args.AgreementId)
                .AddFilter(t => t.flAgreementStatus, AgreementStatuses.Extended);
            if (agreementExtendedModels.Count(env.QueryExecuter) > 0) {
                var extendDateTime = agreementExtendedModels.Select(t => new FieldAlias[] { t.flRequestDate }, env.QueryExecuter).AsEnumerable()
                    .Select(r => r.GetVal(t => t.flRequestDate)).OrderByDescending(x => x).First();
                signAvailableDate = new DateTime(extendDateTime.Year, extendDateTime.Month, extendDateTime.Day).AddWorkingDays(signAvailableDays + 1, env.QueryExecuter).AddMilliseconds(-1);
            }

            return signAvailableDate;
        }

        public override bool IsSignAvailableDate(ActionEnv<DefaultAgrTemplateArgs> env) {
            var currentDateTime = env.QueryExecuter.GetDateTime("dbAgreements");
            return currentDateTime <= SignAvailableDate(env);
        }

        public override bool HasPayment()
        {
            return true;
        }

        public override (string module, string action, object routeValues, string project) GetLinkToObject(ActionEnv<DefaultAgrTemplateArgs> env) {
            var objectId = env.Args.ObjectId;
            if (objectId == 0) {
                objectId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flObjectId, env.QueryExecuter).Value;
            }
            return (nameof(RegistersModule), MnuLandObjectView.MnuName, new LandObjectViewActionQueryArgs() { Id = objectId, MenuAction = MnuLandObjectView.Actions.View }, null);
        }
        public override (string module, string action, object routeValues, string project) GetLinkToTrade(ActionEnv<DefaultAgrTemplateArgs> env) {
            var tradeId = env.Args.TradeId;
            if (tradeId == 0) {
                tradeId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flTradeId, env.QueryExecuter).Value;
            }
            return (nameof(RegistersModule), nameof(MnuLandObjectTradeView), new MnuLandObjectTradeViewArgs() { tradeId = tradeId, MenuAction = MnuLandObjectView.Actions.View }, null);
        }
        public override string GetLinkToEtp(ActionEnv<DefaultAgrTemplateArgs> env) {
            var auctionId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flAuctionId, env.QueryExecuter).Value;
            return $"https://e-auction.gosreestr.kz/p/ru/auctions/{auctionId}/view";
        }
    }
}