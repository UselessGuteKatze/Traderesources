using CommonSource.References.Object;
using CommonSource.SearchCollections.Object;
using FishingSource.FieldEditors.Object;
using FishingSource.Helpers;
using FishingSource.Helpers.Object;
using FishingSource.Helpers.Trade;
using FishingSource.QueryTables.Common;
using FishingSource.QueryTables.Object;
using FishingSource.QueryTables.Trade;
using FishingSource.References.Object;
using FishingSource.SearchCollections.Object;
using Newtonsoft.Json;
using System;
using System.Linq;
using TradeResourcesPlugin.Helpers;
using TradeResourcesPlugin.Modules.FishingMenus.Objects;
using TradeResourcesPlugin.Modules.FishingMenus.Trades;
using UsersResources;
using YodaApp.YodaHelpers.Scriban;
using YodaApp.YodaHelpers.SearchCollections;
using YodaCommonReferences;
using YodaHelpers.ActionMenus;
using YodaHelpers.HtmlDocumentBuilder;
using YodaQuery;
using PaymentItemModel = TradeResourcesPlugin.Helpers.Agreements.PaymentItemModel;

namespace TradeResourcesPlugin.Modules.FishingMenus.Agreements {
    public class ДоговорНаВедениеРыбногоХозяйстваОтрхИСрх : DefaultAgrTemplate<ДоговорНаВедениеРыбногоХозяйстваОтрхИСрх> {
        public override void SetAgreementNumber(int agreementId) {
            DocNumber = $"{agreementId}-ТПР";
        }
        public override string SetDefaultLanguage() {
            return "ru";
        }
        public override string[] SetLanguages() {
            return new[] { "kz", "ru" };
        }

        public string ГородПосёлокСело { get; set; }
        public ДоговорМодель Договор { get; set; }
        public РыбохозяйственныйВодоёмМодель РыбохозяйственныйВодоём { get; set; }
        public РеквизитыМодель Реквизиты { get; set; }
        public class ДоговорМодель {
            public АкиматМодель Акимат { get; set; }
            public ПокупательМодель Покупатель { get; set; }
            public int СрокЗаключенияНаЛет { get; set; }
            public string ДоговорВЦеляхВедения { get; set; }
        }
        public class АкиматМодель {
            public string АкиматОбластиИлиРайона { get; set; }
            public string ТерриториальноеПодразделениеВедомстваУполномоченногоОргана { get; set; }
            public string РешениеАкиматаОтДаты { get; set; }
            public string РешениеАкиматаНомер { get; set; }
        }
        public class ПокупательМодель {
            public string Название { get; set; }
            public string ВЛице { get; set; }
            public string НаОсновании { get; set; }
        }
        public class РыбохозяйственныйВодоёмМодель {
            public string Наименование { get; set; }
            public string ВОбласти { get; set; }
            public string ВРайоне { get; set; }
            public string АдминистративнаяОбласть { get; set; }
            public string АдминистративныйРайон { get; set; }
            public string Месторасположение { get; set; }
            public ФизическаяХарактеристикаМодель ФизическаяХарактеристика { get; set; }
            public БиологическаяХарактеристикаМодель БиологическаяХарактеристика { get; set; }
            public МежеваяТочкаМодель[] МежевыеТочки { get; set; }
        }
        public class ФизическаяХарактеристикаМодель {
            public decimal Длина { get; set; }
            public decimal Ширина { get; set; }
            public decimal Площадь { get; set; }
            public decimal ГлубинаМаксимальная { get; set; }
            public decimal ГлубинаСредняя { get; set; }
        }
        public class БиологическаяХарактеристикаМодель {
            public СтепеньМодель СтепеньЗарастанияНадводной { get; set; }
            public СтепеньМодель СтепеньЗарастанияПодводной { get; set; }
            public СтепеньМодель СтепеньРазвитияФитопланктона { get; set; }
            public string ВидовойСоставФауны { get; set; }
            public string ВидовойСоставПромысловойФауны { get; set; }
            public string Рыбопродуктивность { get; set; }
            public string Загрязнение { get; set; }
            public string ВодозаборныеСооружения { get; set; }
            public int КоличествоМест { get; set; }
            public string ДругиеСведения { get; set; }
        }
        public class СтепеньМодель {
            public string Значение { get; set; }
            public decimal Процент { get; set; }
        }
        public class МежеваяТочкаМодель {
            public string X { get; set; }
            public string Y { get; set; }
        }
        public class РеквизитыМодель {
            public string ТерриториальноеПодразделениеВедомстваУполномоченногоОргана { get; set; }
            public string Пользователь { get; set; }
        }

        public override string[] SetReadOnlyProprties() {
            return new[] { "МежевыеТочки", "ФизическаяХарактеристика", "БиологическаяХарактеристика", "РыбохозяйственныйВодоём.Наименование" };
        }

        public override void FillModel(ActionEnv<DefaultAgrTemplateArgs> env) {
            var obj = ObjectHelper.GetObjectModel(env.Args.ObjectId, env.QueryExecuter);
            var trd = TradeHelper.GetTradeModel(env.Args.TradeId, env.QueryExecuter);

            var seller = env.User.GetAccountData(env.QueryExecuter);
            var winner = trd.flWinnerData;

            var refAr = RefAr.Instance;

            ГородПосёлокСело = "_____";
            Договор = new ДоговорМодель() {
                Акимат = new АкиматМодель {
                    АкиматОбластиИлиРайона = refAr.Search(obj.flRegion).Text + ", " + refAr.Search(obj.flDistrict).Text,
                    ТерриториальноеПодразделениеВедомстваУполномоченногоОргана = seller.Account.NameRu,
                    РешениеАкиматаОтДаты = $"«__» ____ 20__ года",
                    РешениеАкиматаНомер = "__"
                },
                Покупатель = new ПокупательМодель {
                    ВЛице = $"(должность) {winner.FullName}",
                    Название = winner.CorpName,
                    НаОсновании = "Устава"
                },
                СрокЗаключенияНаЛет = 0,
                ДоговорВЦеляхВедения = "(оставить только целевое назначение)" + trd.flNote
            };
            var refFauna = new RefFaunaDetailed();
            var refLevel = new RefPropertyLevel();
            var fishProductivityEditor = new FishProductivityEditor(null, null, null);
            var waterIntakesEditor = new WaterIntakesEditor(null, null, null);
            РыбохозяйственныйВодоём = new РыбохозяйственныйВодоёмМодель {
                Наименование = obj.flName,
                АдминистративнаяОбласть = refAr.Search(obj.flRegion).Text,
                АдминистративныйРайон = refAr.Search(obj.flDistrict).Text,
                Месторасположение = obj.flLocation,
                ВОбласти = refAr.Search(obj.flRegion).Text,
                ВРайоне = refAr.Search(obj.flDistrict).Text,
                МежевыеТочки = obj.flCoords.Select(x => new МежеваяТочкаМодель { X = x.appropriateX, Y = x.appropriateY, }).ToArray(),
                БиологическаяХарактеристика = new БиологическаяХарактеристикаМодель {
                    ВидовойСоставПромысловойФауны = ReferenceHelper.GetGroupedString(refFauna, obj.flСommercialFauna),
                    ВидовойСоставФауны = ReferenceHelper.GetGroupedString(refFauna, obj.flFauna),
                    ВодозаборныеСооружения = waterIntakesEditor.GetDisplayString(obj.flWaterIntakes, null),
                    ДругиеСведения = obj.flAnotherInformation,
                    Загрязнение = obj.flPollution,
                    КоличествоМест = obj.flPermanentUsingPlacesCount,
                    Рыбопродуктивность = fishProductivityEditor.GetDisplayString(obj.flFishProductivity, null),
                    СтепеньЗарастанияНадводной = new СтепеньМодель {
                        Значение = refLevel.Search(obj.flEmergentVegetation).Text,
                        Процент = obj.flEmergentVegetationValue
                    },
                    СтепеньЗарастанияПодводной = new СтепеньМодель {
                        Значение = refLevel.Search(obj.flUnderwaterVegetation).Text,
                        Процент = obj.flUnderwaterVegetationValue
                    },
                    СтепеньРазвитияФитопланктона = new СтепеньМодель {
                        Значение = refLevel.Search(obj.flPhytoplankton).Text,
                        Процент = obj.flPhytoplanktonValue
                    }
                },
                ФизическаяХарактеристика = new ФизическаяХарактеристикаМодель {
                    ГлубинаМаксимальная = obj.flMaxDepth,
                    ГлубинаСредняя = obj.flAvgDepth,
                    Длина = obj.flLength,
                    Площадь = obj.flArea,
                    Ширина = obj.flWidth
                }
            };
            Реквизиты = new РеквизитыМодель {
                ТерриториальноеПодразделениеВедомстваУполномоченногоОргана = seller.BankAccount != null ? $"{seller.Account.NameRu}, БИН {seller.CorpData.Bin}, {new BankSearchCollection().GetItem(seller.BankAccount.Bic, env.RequestContext).Name}, БИК {seller.BankAccount.Bic}, ИИК {seller.BankAccount.Iban}, {string.Join(", ", seller.AccountAddresses.Select(x => YodaUserHelpers.ToAddressString(x)))}" : $"Не найдены банковские реквизиты для {seller.Account.NameRu}. Укажите их в профиле, чтобы избежать подобных ошибок",
                Пользователь = $"{winner.FullOrgXinName}, {winner.ParticipiantBankDetails.BankName}, БИК {winner.ParticipiantBankDetails.BIK}, ИИК {winner.ParticipiantBankDetails.IIK}, {winner.AddressInfo}"
            };
        }

        public override void TranslateModel(ActionEnv<DefaultAgrTemplateArgs> env) {
            var obj = ObjectHelper.GetObjectModel(env.Args.ObjectId, env.QueryExecuter);

            var refAr = RefAr.Instance;

            switch (Language) {
                case "kz": {
                        Договор.Акимат.АкиматОбластиИлиРайона = Translate(env.RequestContext, Language, refAr.Search(obj.flRegion).Text) + ", " + Translate(env.RequestContext, Language, refAr.Search(obj.flDistrict).Text);
                        Договор.Акимат.РешениеАкиматаОтДаты = "20__ жылғы «__» ____";
                        РыбохозяйственныйВодоём.АдминистративнаяОбласть = Translate(env.RequestContext, Language, РыбохозяйственныйВодоём.АдминистративнаяОбласть);
                        РыбохозяйственныйВодоём.АдминистративныйРайон = Translate(env.RequestContext, Language, РыбохозяйственныйВодоём.АдминистративныйРайон);
                        РыбохозяйственныйВодоём.ВОбласти = Translate(env.RequestContext, Language, РыбохозяйственныйВодоём.ВОбласти);
                        РыбохозяйственныйВодоём.ВРайоне = Translate(env.RequestContext, Language, РыбохозяйственныйВодоём.ВРайоне);

                        var refFauna = new RefFaunaDetailed();
                        var waterIntakesEditor = new WaterIntakesEditor(null, null, null);
                        var fishProductivityEditor = new FishProductivityEditor(null, null, null);
                        РыбохозяйственныйВодоём.БиологическаяХарактеристика.ВидовойСоставПромысловойФауны = ReferenceHelper.GetGroupedString(refFauna, obj.flСommercialFauna, env.RequestContext, Language);
                        РыбохозяйственныйВодоём.БиологическаяХарактеристика.ВидовойСоставФауны = ReferenceHelper.GetGroupedString(refFauna, obj.flFauna, env.RequestContext, Language);
                        РыбохозяйственныйВодоём.БиологическаяХарактеристика.ВодозаборныеСооружения = waterIntakesEditor.GetDisplayString(obj.flWaterIntakes, env, Language);
                        РыбохозяйственныйВодоём.БиологическаяХарактеристика.Рыбопродуктивность = fishProductivityEditor.GetDisplayString(obj.flFishProductivity, env, Language);

                        РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияНадводной.Значение = Translate(env.RequestContext, Language, РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияНадводной.Значение);
                        РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияПодводной.Значение = Translate(env.RequestContext, Language, РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияПодводной.Значение);
                        РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньРазвитияФитопланктона.Значение = Translate(env.RequestContext, Language, РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньРазвитияФитопланктона.Значение);
                        break;
                    }
                default: {
                        throw new NotImplementedException($"Unknown language: {Language}");
                    }
            };
        }

        public override decimal? GetSellPrice(ActionEnv<DefaultAgrTemplateArgs> env) {
            var tradeId = env.Args.TradeId;
            if (tradeId == 0) {
                tradeId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flTradeId, env.QueryExecuter).Value;
            }
            var flcost = new TbTrades().AddFilter(t => t.flId, tradeId).SelectScalar(t => t.flCost, env.QueryExecuter);
            return flcost;
        }

        public override string GetContent() {
            var template = string.Empty;

            switch (Language) {
                case "ru": {
                        template += new DocumentBuilder()
                            .Doc(doc => {
                                doc.AddSection(s => s.Body(b => b
                                    .Div("ДОГОВОР № {{ DocNumber }} НА ВЕДЕНИЕ РЫБНОГО ХОЗЯЙСТВА", new CssClass("text-center font-weight-bold"))
                                    .Div("(ПРИ ВЕДЕНИИ ОЗЕРНО-ТОВАРНОГО РЫБОВОДНОГО ХОЗЯЙСТВА ИЛИ САДКОВОГО РЫБОВОДНОГО ХОЗЯЙСТВА)", new CssClass("text-center font-weight-bold"))
                                    .BrTag()
                                    .Div("{{ ГородПосёлокСело }}")
                                    .BrTag()
                                    .Paragraph("На основании решения (постановления) акимата {{ Договор.Акимат.АкиматОбластиИлиРайона }} о закреплении рыбохозяйственных водоемов и (или) участков от {{ Договор.Акимат.РешениеАкиматаОтДаты }} № {{ Договор.Акимат.РешениеАкиматаНомер }} в целях ведения {{ Договор.ДоговорВЦеляхВедения }} {{ Договор.Акимат.ТерриториальноеПодразделениеВедомстваУполномоченногоОргана }}, действующего на основании Положения, в дальнейшем именуемый «Территориальное подразделение ведомства уполномоченного органа», с одной стороны, и {{ Договор.Покупатель.Название }}, в лице {{ Договор.Покупатель.ВЛице }} именуемый в дальнейшем «Пользователь», действующий на основании {{ Договор.Покупатель.НаОсновании }}, заключили настоящий Договор о нижеследующем:")
                                    .BrTag()

                                    .Div("1. Предмет договора", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("1. Территориальное подразделение ведомства уполномоченного органа предоставляет право ведения рыбного хозяйства на закрепленном за Пользователем рыбохозяйственном водоеме и (или) участке в целях ведения {{ Договор.ДоговорВЦеляхВедения }}, расположенного в {{ РыбохозяйственныйВодоём.ВОбласти }} {{ РыбохозяйственныйВодоём.ВРайоне }}, площадь, размеры и другие параметры, которых указаны в прилагаемом к настоящему Договору паспорте рыбохозяйственного водоема и (или) участка.")
                                    .Paragraph("2. Наименование рыбохозяйственного водоема и (или) участка и/или его номера - {{ РыбохозяйственныйВодоём.Наименование }}")
                                    .BrTag()

                                    .Div("2. Права и обязанности сторон", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("3. Пользователь в соответствии с Законом Республики Казахстан «Об охране, воспроизводстве и использовании животного мира» имеет право:")
                                    .Paragraph("1) осуществлять выращивание всех видов рыб и других водных животных, за исключением запрещенных действующим законодательством;")
                                    .Paragraph("2) осуществлять товарное рыбоводство в коммерческих целях, в целях обеспечения туризма, а также рекреационной деятельности граждан, в том числе любительского (спортивного) рыболовства на закрепленном за ним рыбохозяйственном водоеме и (или) участке;")
                                    .Paragraph("3) осуществлять выращивание молоди промысловых, а также редких и находящихся под угрозой исчезновения видов рыб в целях зарыбления естественных водоемов и в качестве рыбопосадочного материала для товарного выращивания;")
                                    .Paragraph("4) собственности на выращенные объекты животного мира, в том числе и полученную из них продукцию, а также на их перевозку и реализацию;")
                                    .Paragraph("5) заключать договоры с физическими и юридическими лицами на приобретение маточного поголовья выращиваемых видов рыб и их молоди, в том числе в электронной форме на веб-портале реестра государственного имущества (далее – Портал);")
                                    .Paragraph("6) содержать маточное и ремонтно-маточное стадо производителей;")
                                    .Paragraph("7) круглогодично перегораживать залив или участок тросами и буями, препятствующими проникновению туристических, частных, любительских и любых иных посторонних плавательных средств и лиц, в целях недопущения попадания горюче-смазочных материалов в воду, а также исключения фактора беспокойства рыб, при этом не препятствующих передвижению плавательных средств государственных органов, а также судоходству, движущемуся по линии фарватера (для садковых рыбоводных хозяйств);")
                                    .Paragraph("8) устанавливать обловочные сети с разной ячеей для предотвращения возможной потери рыбы при порыве или прогрызании хищниками садка, при необходимости ремонта садков (устранение прорывов) (для садковых рыбоводных хозяйств);")
                                    .Paragraph("9) своевременно выполнять план развития субъектов рыбного хозяйства и сдавать отчеты территориальным подразделениям ведомства уполномоченного органа, в том числе в электронной форме на Портале; (далее – Инспекция);")
                                    .Paragraph("10) в случае обстоятельств непреодолимой силы вносить предложения в конкурсную комиссию, создаваемую в соответствии с Правилами проведения конкурса по закреплению охотничьих угодий и рыбохозяйственных водоемов и (или) участков и квалификационных требований, предъявляемых к участникам конкурса, утвержденными приказом Министра сельского хозяйства Республики Казахстан от 19 марта 2015 года № 18-04/245 (зарегистрирован в Реестре государственной регистрации нормативных правовых актов за № 11227) (далее – комиссия) по пересмотру плана развития субъектов рыбного хозяйства.")
                                    .Paragraph("4. Территориальное подразделение ведомства уполномоченного органа в пределах компетенции, установленной с Законом Республики Казахстан «Об охране, воспроизводстве и использовании животного мира», расторгает в одностороннем порядке настоящий Договор:")
                                    .Paragraph("1) при систематическом нарушении условий настоящего Договора;")
                                    .Paragraph("2) при систематическом нарушении требований законодательства Республики Казахстан в области охраны, воспроизводства и использования животного мира;")
                                    .Paragraph("3) в случае невыполнения или неполного выполнения обязательств в соответствии с Планом развития субъектов рыбного хозяйства по форме, утвержденной приказом Министра сельского хозяйства Республики Казахстан от 31 марта 2015 года № 18-04/287 «Об утверждении типовой формы плана развития субъектов охотничьего и рыбного хозяйств» (зарегистрирован в Реестре государственной регистрации нормативных правовых актов за № 10890).")
                                    .BrTag()

                                    .Div("3. Обязанности сторон", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("5. Пользователь в соответствии с Законом Республики Казахстан «Об охране, воспроизводстве и использовании животного мира» обязан:")
                                    .Paragraph("1) соблюдать требования законодательства Республики Казахстан в области охраны, воспроизводства и использования животного мира;")
                                    .Paragraph("2) своевременно выполнять план развития субъектов рыбного хозяйства на закрепляемый период с указанием объемов выращивания рыб по годам*;")
                                    .Paragraph("3) осуществлять выращивание только разрешенных видов рыб и других водных животных;")
                                    .Paragraph("4) использовать технологии по воспроизводству и товарному выращиванию рыб и других водных животных, безопасные для населения и окружающей среды, а также не допускающие отрицательного воздействия на окружающую среду и животный мир;")
                                    .Paragraph("5) представлять в Инспекцию сведения по формам и в порядке, утвержденном приказом исполняющего обязанности Министра окружающей среды и водных ресурсов Республики Казахстан от 29 ноября 2013 года № 363-Ө «Об утверждении форм, предназначенных для сбора административных данных» (зарегистрирован в Реестре государственной регистрации нормативных правовых актов № 9203);")
                                    .Paragraph("6) не препятствовать осуществлению проверок в целях государственного контроля и надзора за соблюдением требований законодательства в области охраны, воспроизводства и использовании животного мира;")
                                    .Paragraph("7) при осуществлении эмиссий в окружающую среду получать экологическое разрешение в соответствии с Экологическим кодексом Республики Казахстан;")
                                    .Paragraph("8) обеспечить содержание в надлежащем санитарном и экологическом состоянии мест выращивания, садков на закрепленных за ним рыбохозяйственных водоемах и (или) участках, а также береговых полос.")
                                    .Paragraph("6. Территориальное подразделение ведомства уполномоченного органа в пределах компетенции, установленной законодательством Республики Казахстан, обеспечивает рассмотрение комиссией предложений Пользователя по пересмотру Плана развития субъектов рыбного хозяйства.")
                                    .BrTag()

                                    .Div("4. Ответственность сторон", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("7. Пользователь ни полностью, ни частично не должен передавать кому-либо свои обязательства по настоящему Договору.")
                                    .Paragraph("8. В случае нарушения прав Пользователя в рамках данного договора, Инспекция или Местный исполнительный орган (Акимат) несут ответственность в соответствии с Законом Республики Казахстан «О государственной службе Республики Казахстан» и Законом Республики Казахстан «О местном государственном управлении и самоуправлении в Республике Казахстан».")
                                    .BrTag()

                                    .Div("5. Обстоятельства непреодолимой силы", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("9. Ни одна из сторон не будет нести ответственности за неисполнение или ненадлежащее исполнение каких-либо обязательств настоящего Договора, если такое неисполнение или ненадлежащее исполнение вызваны обстоятельствами непреодолимой силы.")
                                    .Paragraph("10. Обстоятельством непреодолимой силы признается событие, препятствующее исполнению настоящего Договора, неподвластное контролю Сторон, не связанное с их просчетом или небрежностью и имеющее непредвиденный характер.")
                                    .Paragraph("11. В случае возникновения обстоятельств непреодолимой силы, Пользователь незамедлительно уведомляет об этом Инспекцию путем вручения и (или) отправки письменного уведомления по почте либо факсимильной связью, уточняющего дату начала и описание обстоятельств непреодолимой силы.")
                                    .Paragraph("12. При возникновении обстоятельств непреодолимой силы Стороны незамедлительно проводят совещание с участием представителей Инспекции, для поиска решения выхода из сложившейся ситуации и используют все не противоречащие законодательству Республики Казахстан средства, для сведения к минимуму последствий обстоятельств непреодолимой силы.")
                                    .Paragraph("13. Обстоятельства непреодолимой силы, указанные в настоящей главе, признаются правомочными, если они подтверждены компетентными государственными органами и организациями.")
                                    .BrTag()

                                    .Div("6. Заключительные положения", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("14. Настоящий Договор вступает в силу с момента подписания и заключен сроком на {{ Договор.СрокЗаключенияНаЛет }} года (лет).")
                                    .Paragraph("15. Действие настоящего Договора прекращается в случаях:")
                                    .Paragraph("1) добровольного отказа от ведения рыбного хозяйства;")
                                    .Paragraph("2) истечения срока действия настоящего Договора;")
                                    .Paragraph("3) прекращения деятельности Пользователя;")
                                    .Paragraph("4) изъятия земельных участков, на которых произведено закрепление рыбохозяйственных водоемов и (или) участков, для государственных нужд в порядке, установленном законодательством Республики Казахстан;")
                                    .Paragraph("5) возникновения иных оснований, предусмотренных законодательными актами Республики Казахстан.")
                                    .Paragraph("В случае прекращения деятельности Пользователь в течение десяти календарных дней уведомляет территориальные подразделения ведомства уполномоченного органа о прекращении деятельности путем отправки письменного уведомления по почте.")
                                    .Paragraph("16. При разрешении споров по ведению рыбного хозяйства Стороны руководствуются условиями настоящего Договора и законодательством Республики Казахстан.")
                                    .Paragraph("17. Паспорт рыбохозяйственного водоема и (или) участка установленной формы, согласно приложению к настоящему Договору, закрепленного за Пользователем, является неотъемлемой частью Договора.")
                                    .Paragraph("Паспорт рыбохозяйственного водоема и (или) участка заполняется Пользователем на Портале ежегодно, в первом квартале следующим за отчетным годом на основании документов статистического и бухгалтерского учетов.")
                                    .Paragraph("18. Все изменения и дополнения к настоящему Договору имеют юридическую силу и являются неотъемлемой его частью, если они совершены в электронной форме и подписаны уполномоченными представителями обеих сторон.")
                                    .Paragraph("19. Стороны стремятся к разрешению споров, возникающих из настоящего Договора, путем переговоров, а в случае не достижения Сторонами соглашения, разрешаются в порядке, установленном Гражданским кодексом Республики Казахстан.")
                                    .Paragraph("20. Настоящий Договор составлен в четырех экземплярах на государственном и русском языках, имеющих одинаковую юридическую силу.")
                                    .Paragraph("21. Настоящий Договор вступает в силу с момента его подписания последней из Сторон с использованием электронной цифровой подписи на Портале.")
                                    .Paragraph("При этом, датой заключения настоящего договора определяется дата его подписания с ЭЦП последней из Сторон.")
                                    .BrTag()

                                    .Div("7. Юридические адреса и реквизиты сторон", new CssClass("text-center font-weight-bold"))
                                    .Table(new[] { new DocTableCol("ТерриториальноеПодразделениеВедомстваУполномоченногоОргана", "Территориальное подразделение ведомства уполномоченного органа", 50, "vertical-align-top text-align-justify p-0-10-px"), new DocTableCol("Пользователь", "Пользователь", 50, "vertical-align-top text-align-justify p-0-10-px") }, new РеквизитыМодель[] { Реквизиты }, tableCssClass: "wide-table")
                                ));
                            }).Build();

                        template += new DocumentBuilder()
                            .Doc(doc => {
                                doc.AddSection(s => s.Body(b => b
                                    .Div("Паспорт рыбохозяйственного водоема и (или) участка", new CssClass("text-center font-weight-bold"))
                                    .BrTag()
                                    .Div("{{ РыбохозяйственныйВодоём.Наименование }}", new CssClass("text-center"))
                                    .BrTag()

                                    .Div("1. Географическое расположение", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("Административная область: {{ РыбохозяйственныйВодоём.АдминистративнаяОбласть }}")
                                    .Paragraph("Административная район: {{ РыбохозяйственныйВодоём.АдминистративныйРайон }}")
                                    .Paragraph("Месторасположение водоема: {{ РыбохозяйственныйВодоём.Месторасположение }}")
                                    .Paragraph("Границы участка:")
                                    .Table(new[] { new DocTableCol("X", "Широта", 50), new DocTableCol("Y", "Долгота", 50) }, РыбохозяйственныйВодоём.МежевыеТочки, tableCssClass: "wide-table")
                                    .BrTag()

                                    .Div("2. Физическая характеристика", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("Длина, км: {{ РыбохозяйственныйВодоём.ФизическаяХарактеристика.Длина }}")
                                    .Paragraph("Ширина, км: {{ РыбохозяйственныйВодоём.ФизическаяХарактеристика.Ширина }}")
                                    .Paragraph("Площадь, гектар: {{ РыбохозяйственныйВодоём.ФизическаяХарактеристика.Площадь }}")
                                    .Paragraph("Глубина максимальная, м: {{ РыбохозяйственныйВодоём.ФизическаяХарактеристика.ГлубинаМаксимальная }}")
                                    .Paragraph("Глубина средняя, м: {{ РыбохозяйственныйВодоём.ФизическаяХарактеристика.ГлубинаСредняя }}")
                                    .BrTag()

                                    .Div("3. Биологическая характеристика", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("Степень зарастания водоема:")
                                    .Paragraph("надводной растительностью: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияНадводной.Значение }} ({{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияНадводной.Процент }}%)")
                                    .Paragraph("подводной растительностью: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияПодводной.Значение }} ({{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияПодводной.Процент }}%)")
                                    .BrTag()
                                    .Paragraph("Степень развития фитопланктона (цветение воды): {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньРазвитияФитопланктона.Значение }} ({{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньРазвитияФитопланктона.Процент }}%)")
                                    .BrTag()
                                    .Paragraph("Видовой состав фауны водоема: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.ВидовойСоставФауны }}")
                                    .BrTag()
                                    .Paragraph("Видовой состав промысловой фауны водоема: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.ВидовойСоставПромысловойФауны }}")
                                    .BrTag()
                                    .Paragraph("Рыбопродуктивность водоема, килограмм/гектар: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.Рыбопродуктивность }}")
                                    .BrTag()

                                    .Div("4. Хозяйственная характеристика", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("Загрязнение водоема (участка): {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.Загрязнение }}")
                                    .Paragraph("Водозаборы: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.ВодозаборныеСооружения }}")
                                    .Paragraph("Количество тоней, плавов, станов, других постоянных мест использования рыбных ресурсов водоема (участка): {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.КоличествоМест }}")
                                    .Paragraph("Другие сведения: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.ДругиеСведения }}")
                                    .BrTag()
                                    .Paragraph("Настоящий паспорт составлен в четырех экземплярах и является неотъемлемой частью договора на ведение рыбного хозяйства.")

                                ));
                            }).Build();

                        break;
                    }
                case "kz": {
                        template += new DocumentBuilder()
                            .Doc(doc => {
                                doc.AddSection(s => s.Body(b => b
                                    .Div("БАЛЫҚ ШАРУАШЫЛЫҒЫН ЖҮРГІЗУГЕ АРНАЛҒАН ШАРТ № {{ DocNumber }}", new CssClass("text-center font-weight-bold"))
                                    .Div("(КӨЛ-ТАУАРЛЫ БАЛЫҚ ӨСIРУ ШАРУАШЫЛЫҒЫН НЕМЕСЕ ТОР ҚОРШАМАДА БАЛЫҚ ӨСІРУ ШАРУАШЫЛЫҒЫН ЖҮРГІЗУ КЕЗІНДЕ)", new CssClass("text-center font-weight-bold"))
                                    .BrTag()
                                    .Div("{{ ГородПосёлокСело }}")
                                    .BrTag()
                                    .Paragraph("{{ Договор.Акимат.АкиматОбластиИлиРайона }} әкімдігінің балық шаруашылығы су айдындарын және (немесе) учаскелерін бекітіп беру туралы {{ Договор.Акимат.РешениеАкиматаОтДаты }} № {{ Договор.Акимат.РешениеАкиматаНомер }} шешімі (қаулысы) негізінде көлде {{ Договор.ДоговорВЦеляхВедения }} жүргізу мақсатында Ереже негізінде әрекет ететін, бұдан әрі «Уәкілетті органның аумақтық бөлімшесі» деп аталатын, {{ Договор.Акимат.ТерриториальноеПодразделениеВедомстваУполномоченногоОргана }} бір тараптан және {{ Договор.Покупатель.НаОсновании }} негізінде әрекет ететін, бұдан әрі «Пайдаланушы» деп аталатын {{ Договор.Покупатель.ВЛице }} атынан {{ Договор.Покупатель.Название }} екінші тараптан төмендегілер туралы осы шартты жасасты.")
                                    .BrTag()

                                    .Div("1. Шарттың нысанасы", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("1. Уәкілетті органның ведомствосының аумақтық бөлімшелері осы шартқа қоса беріліп отырған балық шаруашылығы су айдынының және (немесе) учаскесінің паспортында алаңы, мөлшері және басқа параметрлері көрсетілген, {{ РыбохозяйственныйВодоём.ВОбласти }} {{ РыбохозяйственныйВодоём.ВРайоне }} орналасқан Пайдаланушыға көлде тауарлы балық шаруашылығын жүргізу мақсатында бекітіліп берілген балық шаруашылығы су айдын (дар) ында және (немесе) учаскелерінде {{ Договор.ДоговорВЦеляхВедения }} құқығын береді.")
                                    .Paragraph("2. Балық шаруашылығы су айдындарының және (немесе) учаскелерінің атауы және/немесе олардың нөмірлері - {{ РыбохозяйственныйВодоём.Наименование }}")
                                    .BrTag()

                                    .Div("2. Тараптардың құқықтары", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("3. Пайдаланушы «Жануарлар дүниесiн қорғау, өсiмiн молайту және пайдалану туралы» Қазақстан Республикасының Заңына сәйкес:")
                                    .Paragraph("1) қолданыстағы заңнамамен тыйым салынғандарды қоспағанда, балықтардың және басқа да су жануарларының барлық түрлерін өсіруді жүзеге асыруға;")
                                    .Paragraph("2) туризмді, сондай-ақ азаматтардың рекреациялық қызметін, оның ішінде өзіне бекітілген балық шаруашылығы су айдынында және (немесе) учаскесінде әуесқойлық (спорттық) балық аулауды қамтамасыз ету мақсатында коммерциялық мақсаттарда тауарлық балық өсіруді жүзеге асыруға;")
                                    .Paragraph("3) табиғи су қоймаларын балық жіберу мақсатында және тауарлы өсіру үшін отырғызу материалы ретінде кәсіпшілік, сондай-ақ сирек кездесетін және құрып кету қаупі төнген балық түрлерінің шабақтарын өсіруді жүзеге асыруға;")
                                    .Paragraph("4) жануарлар дүниесінің өсірілген объектілеріне, оның ішінде балық аулау олжаларын және бұл ретте алынған өнiмдi меншiктенуге, сондай-ақ оларды тасымалдауға және сатуға;")
                                    .Paragraph("5) жеке және заңды тұлғалармен өсірілетін балық түрлерінің аналық балықтар басы және олардың шабақтарын сатып алуға шарттар жасасуға, соның ішінде электрондық нысанда мемлекеттік мүлік тізілімінің веб-порталында (бұдан әрі - Портал);")
                                    .Paragraph("6) өндірушілердің аналық және аналық табындарын ұстауға;")
                                    .Paragraph("7) жанар-жағар май материалдарының суға түсуіне жол бермеу мақсатында, сондай-ақ мемлекеттік органдардың жүзу құралдарының қозғалысына, сондай-ақ фарватер желісі бойынша жүріп келе жатқан кеме қатынасына кедергі келтірмейтін балықтардың мазасыздану факторын болдырмау мақсатында, бұл ретте туристік, жеке, әуесқойлық және кез келген өзге де бөгде жүзу құралдарының және адамдардың кіруіне кедергі келтіретін арқандармен және буйлармен жыл бойы (шарбақтық балық өсіру шаруашылықтары үшін) бөгеуге;")
                                    .Paragraph("8) жыртқыштар шарбақты жыртқан немесе жеген кезде балықтың жоғалуының алдын алу үшін, шарбақтарды жөндеу қажет болған жағдайда (шарбақтық балық өсіру шаруашылықтары үшін) әртүрлі ұяшықтары бар жаппай ауларын (бұзуларды жою) орнатуға;")
                                    .Paragraph("9) балық шаруашылығы субъектілерінің даму жоспарын мерзімінен бұрын орындау және уәкілетті орган ведомствосының аумақтық бөлімшелеріне (бұдан әрі – Инспекция) есеп беруге, соның ішінде электрондық нысанда порталында;")
                                    .Paragraph("10) еңсерілмейтін күш жағдайлары болған жағдайда, Қазақстан Республикасы Ауыл шаруашылығы министрінің 2015 жылғы 19 наурыздағы № 18-04/245 бұйрығымен бекітілген (Нормативтік құқықтық актілерді мемлекеттік тіркеу тізілімінде № 11227 болып тіркелген) Аңшылық алқаптар мен балық шаруашылығы су айдындарын және (немесе) учаскелерiн бекiтiп беру жөнiнде конкурс өткiзу қағидаларына және конкурсқа қатысушыларға қойылатын бiлiктiлiк талаптарына сәйкес құратын конкурстық комиссия (бұдан әрі – комиссия) балық шаруашылығы субъектілерін дамыту жоспарын қайта қарау жөнінде ұсыныс енгізуге құқығы бар.")
                                    .Paragraph("4. Уәкілетті органның ведомствосының аумақтық бөлімшелері «Жануарлар дүниесiн қорғау, өсiмiн молайту және пайдалану туралы» Қазақстан Республикасының Заңында белгіленген құзіреті шегінде осы шартты біржақты тәртіппен мынадай жағдайларда:")
                                    .Paragraph("1) осы Шарттың талаптары жүйелі түрде бұзылған кезде;")
                                    .Paragraph("2) жануарлар дүниесін қорғау, өсімін молайту және пайдалану саласындағы Қазақстан Республикасы заңнамасының талаптары жүйелі түрде бұзылғанда;")
                                    .Paragraph("3) «Аңшылық және балық шаруашылықтары субъектілерін дамыту жоспарының үлгілік нысанын бекіту туралы» Қазақстан Республикасы Ауыл шаруашылығы министрінің 2015 жылғы 31 наурыздағы № 18-04/287 бұйрығымен (Нормативтік құқықтық актілерді мемлекеттік тіркеу тізілімінде № 10890 болып тіркелген) бекітілген нысан бойынша Балық шаруашылығы субъектілерін дамыту жоспарына сәйкес міндеттемелер орындалмағанда немесе толық орындалмағанда бұзады.")
                                    .BrTag()

                                    .Div("3. Тараптардың міндеттері", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("5. Пайдаланушы «Жануарлар дүниесiн қорғау, өсiмiн молайту және пайдалану туралы» Қазақстан Республикасының Заңына сәйкес:")
                                    .Paragraph("1) жануарлар дүниесiн қорғау, өсiмiн молайту және пайдалану саласындағы Қазақстан Республикасы заңнамасының талаптарын сақтауға;")
                                    .Paragraph("2) жыл бойынша балық өсіру көлемін көрсете отырып, бекітіліп берілетін кезеңге балық шаруашылығы субъектілерінің даму жоспарын жасау және оны уақтылы орындау*;")
                                    .Paragraph("3) балық және басқа да су жануарларының рұқсат етілген түрлерін ғана өсіруді жүзеге асыруға;")
                                    .Paragraph("4) балық және басқа да су жануарларын өсімін молайту және тауарлы өсіру жөніндегі технологияларды халыққа және қоршаған ортаға қауіпсіз, қоршаған орта мен жануарлар дүниесіне теріс әсер етуге жол бермейтін тәсілдермен пайдалануға;")
                                    .Paragraph("5) «Әкімшілік деректерді жинауға арналған нысандарды бекіту туралы» Қазақстан Республикасы Қоршаған орта және су ресурстары министрінің міндетін атқарушының 2013 жылғы 29 қарашадағы № 363-Ө бұйрығымен (Нормативтік құқықтық актілерді мемлекеттік тіркеу тізілімінде № 9203 болып тіркелген) бекітілген нысандар бойынша және тәртіппен Инспекцияға мәліметтер ұсынуға;")
                                    .Paragraph("6) Қазақстан Республикасының жануарлар дүниесін қорғау, өсімін молайту және пайдалану туралы заңнамасы талаптарының сақталуына мемлекеттік бақылау мен қадағалау мақсатында тексерулерді жүзеге асыруға кедергі келтірмеуге;")
                                    .Paragraph("7) қоршаған ортаға эмиссияларды жүзеге асырғанда Қазақстан Республикасының Экологиялық кодексіне сәйкес экологиялық рұқсат алуға;")
                                    .Paragraph("8) өздеріне бекітіліп берілген балық шаруашылығы су айдындарында және (немесе) учаскелерінде, сондай-ақ жағалау жолақтарында өсіру орындарын, бақтарды тиісті санитарлық және экологиялық жағдайда ұстауды қамтамасыз етсін.")
                                    .Paragraph("6. Уәкілетті органның ведомствосының аумақтық бөлімшелері Қазақстан Республикасының заңнамасында белгіленген құзыреті шегінде комиссияның пайдаланушының балық шаруашылығы субъектілерін дамыту жоспарын қайта қарау жөніндегі ұсыныстарын қарауын қамтамасыз етеді.")
                                    .BrTag()

                                    .Div("4. Тараптардың жауапкершілігі", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("7. Пайдаланушы осы шарт бойынша өзінің міндеттемелерін ешкімге толығымен де, ішінара да бермеуі тиіс.")
                                    .Paragraph("8. Осы шарттың шеңберінде Пайдаланушының құқықтары бұзылған жағдайда Инспекция немесе «Жергілікті атқарушы орган (Әкімдік)» «Қазақстан Республикасының мемлекеттік қызметі туралы» Қазақстан Республикасының Заңына және «Қазақстан Республикасындағы жергілікті мемлекеттік басқару және өзін-өзі басқару туралы» Қазақстан Республикасының Заңына сәйкес жауапты болады.")
                                    .BrTag()

                                    .Div("5. Бой бермейтін күштің мән-жайлары", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("9. Егер осы Шарттың қандай да бір міндеттемелерін орындамау немесе тиісінше орындамау бой бермейтін күштің мән-жайларынан туындаса, Тараптардың ешқайсысы оларды орындамағаны немесе тиісінше орындамағаны үшін жауапты болмайды.")
                                    .Paragraph("10. Бой бермейтін күштің мән-жайлары деп Тараптардың бақылауына көнбейтін, олардың қателігімен немесе салақтығымен байланысты емес және тосын сипатқа ие осы Шартты орындауға кедергі келтіретін оқиға танылады.")
                                    .Paragraph("11. Бой бермейтін күштің мән-жайлары туындаған жағдайда, Пайдаланушы бұл жайында почтамен немесе факсимильді байланыспен бой бермейтін күштің мән-жайлары басталған уақытты және сипаттамасын нақтылайтын жазбаша хабарлама тапсыру және (немесе) жөнелту арқылы Инспекцияны дереу хабардар етеді.")
                                    .Paragraph("12. Бой бермейтін күштің мән-жайлары туындаған кезде, Тараптар орын алып отырған жағдайдан шығудың амалын іздестіру үшін Инспекция өкілдерінің қатысуымен дереу кеңес өткізеді және бой бермейтін күш мән-жайларының зардаптарын барынша азайту үшін Қазақстан Республикасының заңнамасына қайшы келмейтін барлық құралдарды пайдаланады.")
                                    .Paragraph("13. Осы тарауда көрсетілген бой бермейтін күштің мән-жайларын құзыретті мемлекеттік органдар мен ұйымдар растаған болса, олар заңды болып танылады.")
                                    .BrTag()

                                    .Div("6. Қорытынды ережелер", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("14. Осы Шарт қол қойылған сәттен бастап күшiне енедi және {{ Договор.СрокЗаключенияНаЛет }} жыл мерзiмге жасалған.")
                                    .Paragraph("15. Осы шарттың қолданылуы:")
                                    .Paragraph("1) балық шаруашылығын жүргізуден ерікті түрде бас тартқан;")
                                    .Paragraph("2) осы шарттың қолданылу мерзімі аяқталған;")
                                    .Paragraph("3) «Пайдаланушының» қызметі тоқтатылған;")
                                    .Paragraph("4) балық шаруашылығы су айдындары және (немесе) учаскелерi бекiтiлiп берiлген жер учаскелерi Қазақстан Республикасының заңнамасында белгiленген тәртiппен мемлекет мұқтажына алып қойылған;")
                                    .Paragraph("5) Қазақстан Республикасының заңнамалық актілерінде көзделген өзге де негіздер туындаған жағдайларда тоқтатылады.")
                                    .Paragraph("Пайдаланушы қызметі тоқтатылған жағдайда күнтізбелік он күн ішінде уәкілетті органның ведомствосының аумақтық бөлімшелерін пошта арқылы жазбаша хабарлама жіберу арқылы қызметінің тоқтатылғаны туралы хабардар етеді.")
                                    .Paragraph("16. Балық шаруашылығын жүргізу бойынша дауларды шешу кезінде Тараптар осы Шарттың талаптарын және Қазақстан Республикасының заңнамасын басшылыққа алады.")
                                    .Paragraph("17. Пайдаланушыға бекітіліп берілген осы балық шаруашылығын жүргізуге арналған шартқа қосымшаға сәйкес белгіленген нысандағы паспорт шарттың ажырамас бөлігі болып табылады.")
                                    .Paragraph("Пайдаланушы су айдындарының және (немесе) учаскелерінің паспортын статистикалық және бухгалтерлік есепке алу құжаттарының негізінде жыл сайын, есепті жылдан кейінгі бірінші тоқсанда Порталда толтырады.")
                                    .Paragraph("18. Осы Шартқа барлық өзгерістер мен толықтырулар жазбаша түрде жасалса және оған екі тараптың уәкілетті өкілдері қол қойса заңды күшке ие болады және оның ажырамас бөлігі болып табылады.")
                                    .Paragraph("19. Тараптар осы Шарттан туындаған дауларды келіссөздер арқылы шешуге тырысады, ал егер Тараптар келісімге келе алмаса, Қазақстан Республикасының Азаматтық кодексінде белгіленген тәртіппен шешіледі.")
                                    .Paragraph("20. Осы Шарт мемлекеттік және орыс тілдерінде бірдей заңды күші бар төрт данада жасалды.")
                                    .Paragraph("21. Осы Шарт Порталда электрондық цифрлық қолтаңбаны пайдалана отырып, Тараптардың соңғысы қол қойған сәттен бастап күшіне енеді.")
                                    .Paragraph("Бұл ретте, осы шарттың жасалған күні Тараптардың соңғысының ЭЦҚ-мен қол қойылған күні айқындалады")
                                    .BrTag()

                                    .Div("7. Тараптардың заңды мекенжайлары және деректемелері", new CssClass("text-center font-weight-bold"))
                                    .Table(new[] { new DocTableCol("ТерриториальноеПодразделениеВедомстваУполномоченногоОргана", "Уәкілетті органның ведомствосының аумақтық бөлімшелері", 50, "vertical-align-top text-align-justify p-0-10-px"), new DocTableCol("Пользователь", "Пайдаланушы", 50, "vertical-align-top text-align-justify p-0-10-px") }, new РеквизитыМодель[] { Реквизиты }, tableCssClass: "wide-table")
                                ));
                            }).Build();

                        template += new DocumentBuilder()
                            .Doc(doc => {
                                doc.AddSection(s => s.Body(b => b
                                    .Div("Балық шаруашылығы су айдынының және (немесе) учаскесінің паспорты", new CssClass("text-center font-weight-bold"))
                                    .BrTag()
                                    .Div("{{ РыбохозяйственныйВодоём.Наименование }}", new CssClass("text-center"))
                                    .BrTag()

                                    .Div("1. Географиялық орналасуы", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("Әкімшілік облысы: {{ РыбохозяйственныйВодоём.АдминистративнаяОбласть }}")
                                    .Paragraph("Әкімшілік ауданы: {{ РыбохозяйственныйВодоём.АдминистративныйРайон }}")
                                    .Paragraph("Су айдынының орналасқан жері: {{ РыбохозяйственныйВодоём.Месторасположение }}")
                                    .Paragraph("Учаскенің шекаралары:")
                                    .Table(new[] { new DocTableCol("X", "Ендік", 50), new DocTableCol("Y", "Бойлық", 50) }, РыбохозяйственныйВодоём.МежевыеТочки, tableCssClass: "wide-table")
                                    .BrTag()

                                    .Div("2. Физикалық сипаттамасы", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("Ұзындығы, шақырым: {{ РыбохозяйственныйВодоём.ФизическаяХарактеристика.Длина }}")
                                    .Paragraph("Ені, шақырым: {{ РыбохозяйственныйВодоём.ФизическаяХарактеристика.Ширина }}")
                                    .Paragraph("Алаңы, гектар: {{ РыбохозяйственныйВодоём.ФизическаяХарактеристика.Площадь }}")
                                    .Paragraph("Ең жоғарғы тереңдігі, метр: {{ РыбохозяйственныйВодоём.ФизическаяХарактеристика.ГлубинаМаксимальная }}")
                                    .Paragraph("Орташа тереңдігі, метр: {{ РыбохозяйственныйВодоём.ФизическаяХарактеристика.ГлубинаСредняя }}")
                                    .BrTag()

                                    .Div("3. Биологиялық сипаттамасы Глава", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("Су айдынын:")
                                    .Paragraph("суүсті өсімдігінің басу дәрежесі: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияНадводной.Значение }} ({{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияНадводной.Процент }}%)")
                                    .Paragraph("суасты өсімдігінің басу дәрежесі: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияПодводной.Значение }} ({{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньЗарастанияПодводной.Процент }}%)")
                                    .BrTag()
                                    .Paragraph("Фитопланктонның даму дәрежесі (судың гүлденуі): {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньРазвитияФитопланктона.Значение }} ({{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.СтепеньРазвитияФитопланктона.Процент }}%)")
                                    .BrTag()
                                    .Paragraph("Су айдыны фаунасының түрлік құрамы: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.ВидовойСоставФауны }}")
                                    .BrTag()
                                    .Paragraph("Су айдыны кәсіпшілік фаунасының түрлік құрамы: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.ВидовойСоставПромысловойФауны }}")
                                    .BrTag()
                                    .Paragraph("Су айдынының балық өнімділігі, гектарына килогамм: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.Рыбопродуктивность }}")
                                    .BrTag()

                                    .Div("4. Шаруашылық сипаттамасы", new CssClass("text-center font-weight-bold"))
                                    .Paragraph("{{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.Загрязнение }} су айдынының ластануы")
                                    .Paragraph("Сутартқыштар: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.ВодозаборныеСооружения }}")
                                    .Paragraph("Тартымдардың, қалқымалардың, қосындардың, су айдынының (учаскесінің) балық ресурстарын пайдаланудың басқа да тұрақты орындарының саны: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.КоличествоМест }}")
                                    .Paragraph("Басқа мәліметтер: {{ РыбохозяйственныйВодоём.БиологическаяХарактеристика.ДругиеСведения }}")
                                    .BrTag()
                                    .Paragraph("Осы паспорт төрт данада жасалды және балық шаруашылығын жүргізу келісімінің ажырамас бөлігі болып табылады.")

                                ));
                            }).Build();

                        break;
                    }
                default: {
                        throw new NotImplementedException($"Неописанный язык: {Language}");
                    }
            }

            var html = new ScribanRenderBuilder()
                .SetTemplate(template)
                .UseDefaultContext(this)
                .Render();

            return html;
        }

        public override bool HasAccessToCreate(ActionEnv<DefaultAgrTemplateArgs> env) {
            var objectId = env.Args.ObjectId;
            if (objectId == 0) {
                objectId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flObjectId, env.QueryExecuter).Value;
            }
            var objectSeller = new TbObjects().AddFilter(t => t.flId, objectId).SelectScalar(t => t.flSallerBin, env.QueryExecuter);
            var hasPair = new TbSellerSigners().GetPair(objectSeller, env.QueryExecuter, out var data);
            var currentUser = env.User.GetUserXin(env.QueryExecuter);
            var isAgreementSigner = data.flSignerBins.Contains(currentUser);

            var isObjectSeller = currentUser == objectSeller && env.User.HasRole("TRADERESOURCES-Рыбохозяйственные водоёмы-Создание договора", env.QueryExecuter);
            return isAgreementSigner;
        }
        public override bool HasAccessToSign(ActionEnv<DefaultAgrTemplateArgs> env) {
            var objectId = env.Args.ObjectId;
            if (objectId == 0) {
                objectId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flObjectId, env.QueryExecuter).Value;
            }
            var objectSeller = new TbObjects().AddFilter(t => t.flId, objectId).SelectScalar(t => t.flSallerBin, env.QueryExecuter);
            var hasPair = new TbSellerSigners().GetPair(objectSeller, env.QueryExecuter, out var data);
            var currentUser = env.User.GetUserXin(env.QueryExecuter);
            var isAgreementSigner = data.flSignerBins.Contains(currentUser);

            var isObjectSeller = currentUser == objectSeller && env.User.HasRole("TRADERESOURCES-Рыбохозяйственные водоёмы-Создание договора", env.QueryExecuter);
            return isAgreementSigner;
        }
        public override void OnSignEnd(ActionEnv<DefaultAgrTemplateArgs> env, ITransaction transaction) {
            ObjectHelper.SetBlock(AgreementHelper.GetAgreementObjectId(env.Args.AgreementId, env.QueryExecuter), FishingObjectBlocks.SaledAgr, env.QueryExecuter, transaction);
        }

        public override PaymentAndOverpaymentRequisitesModel GetPaymentAndOverpaymentRequisites(ActionEnv<DefaultAgrTemplateArgs> env) {
            if (env.Args.TradeId == 0) {
                env.Args.TradeId = AgreementHelper.GetAgreementTradeId(env.Args.AgreementId, env.QueryExecuter);
            }
            var trd = TradeHelper.GetTradeModel(env.Args.TradeId, env.QueryExecuter);
            return new PaymentAndOverpaymentRequisitesModel() {
                flPayment = new RequisitesModel() {
                    flName = new GrObjectSearchCollection().GetItem(trd.flTaxAuthorityBin, env.RequestContext).ObjectData.NameRu,
                    flXin = trd.flTaxAuthorityBin,
                    flBik = trd.flBik,
                    flIban = trd.flIik,
                    flKbe = trd.flKbe,
                    flKnp = trd.flKnp,
                    flKbk = trd.flKbk
                },
                flOverPayment = new RequisitesModel() {
                    flName = $"{trd.flWinnerData.CorpName} {trd.flWinnerData.LastName} {trd.flWinnerData.FirstName} {trd.flWinnerData.MiddleName}",
                    flXin = trd.flWinnerData.Xin,
                    flBik = trd.flWinnerData.ParticipiantBankDetails.BIK,
                    flIban = trd.flWinnerData.ParticipiantBankDetails.IIK,
                    flKbe = int.TryParse(trd.flWinnerData.ParticipiantBankDetails.KBE, out var flKbe) ? (int?)flKbe : null,
                    flKnp = null,
                    flKbk = null,
                    flContacts = trd.flWinnerData.ContactInfo
                }
            };
        }

        public override SidesAccountsData GetSidesAccountData(ActionEnv<DefaultAgrTemplateArgs> env) {
            if (env.Args.TradeId == 0) {
                env.Args.TradeId = AgreementHelper.GetAgreementTradeId(env.Args.AgreementId, env.QueryExecuter);
            }
            var trd = TradeHelper.GetTradeModel(env.Args.TradeId, env.QueryExecuter);
            return new SidesAccountsData() {
                flWinner = new SideAccountData() {
                    flXin = trd.flWinnerData.Xin,
                    flName = trd.flWinnerData.FullOrgXinName,
                    flAccountType = trd.flWinnerData.UserType
                },
                flSeller = new SideAccountData() {
                    flXin = trd.flCompetentOrgBin,
                    flName = new GrObjectSearchCollection().GetItem(trd.flCompetentOrgBin, env.RequestContext).ObjectData.NameRu,
                    flAccountType = "Corporate"
                }
            };
        }

        public override PaymentItemModel[] GetGuaranteePayments(ActionEnv<DefaultAgrTemplateArgs> env) {
            if (env.Args.TradeId == 0) {
                env.Args.TradeId = AgreementHelper.GetAgreementTradeId(env.Args.AgreementId, env.QueryExecuter);
            }
            var trd = TradeHelper.GetTradeModel(env.Args.TradeId, env.QueryExecuter);
            return JsonConvert.DeserializeObject<PaymentItemModel[]>(JsonConvert.SerializeObject(trd.flWinnerData.GuaranteePayments)).ToArray();
        }

        public override DateTime SignAvailableDate(ActionEnv<DefaultAgrTemplateArgs> env) {
            var currentDateTime = env.QueryExecuter.GetDateTime("dbAgreements");
            return currentDateTime;
        }

        public override bool IsSignAvailableDate(ActionEnv<DefaultAgrTemplateArgs> env) {
            return true;
        }

        public override (string module, string action, object routeValues, string project) GetLinkToObject(ActionEnv<DefaultAgrTemplateArgs> env) {
            var objectId = env.Args.ObjectId;
            if (objectId == 0) {
                objectId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flObjectId, env.QueryExecuter).Value;
            }
            return (nameof(RegistersModule), MnuFishingObjectView.MnuName, new FishingObjectViewArgs() { Id = objectId, MenuAction = MnuFishingObjectView.Actions.View }, null);
        }
        public override (string module, string action, object routeValues, string project) GetLinkToTrade(ActionEnv<DefaultAgrTemplateArgs> env) {
            var tradeId = env.Args.TradeId;
            if (tradeId == 0) {
                tradeId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flTradeId, env.QueryExecuter).Value;
            }
            return (nameof(RegistersModule), nameof(MnuFishingTradeView), new MnuFishingTradeViewArgs() { tradeId = tradeId }, null);
        }
        public override string GetLinkToEtp(ActionEnv<DefaultAgrTemplateArgs> env) {
            var auctionId = new TbAgreements().AddFilter(t => t.flAgreementId, env.Args.AgreementId).SelectScalar(t => t.flAuctionId, env.QueryExecuter).Value;
            return $"https://e-auction.gosreestr.kz/p/ru/auctions/{auctionId}/view";
        }
    }
}